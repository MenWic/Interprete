
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package menwic.interprete.analizadores.a_sintactico;

import menwic.interprete.analizadores.a_lexico.Lexer;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\012\000\002\005\011\000" +
    "\002\007\013\000\002\007\012\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\042\003\000\002\042" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\011\003\000\002\012\004\000\002\012\003\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\015\005\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\006\000\002\022\003" +
    "\000\002\022\003\000\002\023\006\000\002\024\003\000" +
    "\002\024\004\000\002\024\003\000\002\025\011\000\002" +
    "\026\005\000\002\027\003\000\002\027\003\000\002\030" +
    "\004\000\002\030\003\000\002\030\003\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\044\003\000" +
    "\002\044\004\000\002\031\006\000\002\032\012\000\002" +
    "\043\004\000\002\043\003\000\002\034\007\000\002\033" +
    "\003\000\002\033\003\000\002\035\006\000\002\036\003" +
    "\000\002\036\003\000\002\040\011\000\002\041\005\000" +
    "\002\037\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\032\023\035\024\013\025\030\030\034\032" +
    "\032\033\006\034\031\036\012\042\017\043\036\044\010" +
    "\045\041\001\002\000\034\002\uffbb\017\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb" +
    "\040\uffbb\042\uffbb\043\uffbb\001\002\000\032\023\ufffc\024" +
    "\ufffc\025\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc\036\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\001\002\000\004\014" +
    "\236\001\002\000\034\002\uffba\017\uffba\023\uffba\024\uffba" +
    "\025\uffba\030\uffba\032\uffba\033\uffba\034\uffba\036\uffba\040" +
    "\uffba\042\uffba\043\uffba\001\002\000\004\030\223\001\002" +
    "\000\034\002\uffd0\017\uffd0\023\uffd0\024\uffd0\025\uffd0\030" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\040\uffd0\042\uffd0" +
    "\043\uffd0\001\002\000\004\014\177\001\002\000\004\030" +
    "\176\001\002\000\026\023\035\024\013\025\030\030\034" +
    "\032\032\033\006\034\031\036\012\042\017\043\036\001" +
    "\002\000\004\021\uffe9\001\002\000\034\002\uffee\017\uffee" +
    "\023\uffee\024\uffee\025\uffee\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\036\uffee\040\uffee\042\uffee\043\uffee\001\002\000\004" +
    "\014\164\001\002\000\034\002\uffec\017\uffec\023\uffec\024" +
    "\uffec\025\uffec\030\uffec\032\uffec\033\uffec\034\uffec\036\uffec" +
    "\040\uffec\042\uffec\043\uffec\001\002\000\004\021\uffea\001" +
    "\002\000\004\002\163\001\002\000\004\002\uffff\001\002" +
    "\000\004\021\uffe8\001\002\000\004\021\uffe7\001\002\000" +
    "\032\023\ufffd\024\ufffd\025\ufffd\030\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\036\ufffd\042\ufffd\043\ufffd\044\010\045\041\001" +
    "\002\000\034\002\uffeb\017\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\040\uffeb\042" +
    "\uffeb\043\uffeb\001\002\000\004\030\161\001\002\000\004" +
    "\014\153\001\002\000\004\014\146\001\002\000\004\021" +
    "\145\001\002\000\004\004\124\001\002\000\004\030\123" +
    "\001\002\000\004\014\100\001\002\000\036\002\uffd2\017" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\030\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\074\036\uffd2\040\uffd2\042\uffd2\043\uffd2\001" +
    "\002\000\032\023\ufffb\024\ufffb\025\ufffb\030\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\036\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\001\002\000\010\023\045\024\043\025\042\001\002" +
    "\000\004\030\ufff4\001\002\000\004\030\ufff5\001\002\000" +
    "\004\030\046\001\002\000\004\030\ufff6\001\002\000\004" +
    "\014\047\001\002\000\012\015\051\023\055\024\053\025" +
    "\050\001\002\000\004\030\072\001\002\000\004\016\067" +
    "\001\002\000\012\015\060\023\055\024\053\025\050\001" +
    "\002\000\004\030\057\001\002\000\012\015\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\001\002\000\004\030\056\001\002\000" +
    "\012\015\ufff1\023\ufff1\024\ufff1\025\ufff1\001\002\000\012" +
    "\015\ufff0\023\ufff0\024\ufff0\025\ufff0\001\002\000\004\016" +
    "\062\001\002\000\012\015\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\001\002\000\026\023\035\024\013\025\030\030\034\032" +
    "\032\033\006\034\031\036\012\042\017\043\036\001\002" +
    "\000\030\017\066\023\035\024\013\025\030\030\034\032" +
    "\032\033\006\034\031\036\012\042\017\043\036\001\002" +
    "\000\032\017\uffc5\023\uffc5\024\uffc5\025\uffc5\030\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\036\uffc5\040\uffc5\042\uffc5\043\uffc5" +
    "\001\002\000\032\017\uffc4\023\uffc4\024\uffc4\025\uffc4\030" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4\042\uffc4" +
    "\043\uffc4\001\002\000\032\023\ufff8\024\ufff8\025\ufff8\030" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\001\002\000\026\023\035\024\013\025" +
    "\030\030\034\032\032\033\006\034\031\036\012\042\017" +
    "\043\036\001\002\000\030\017\071\023\035\024\013\025" +
    "\030\030\034\032\032\033\006\034\031\036\012\042\017" +
    "\043\036\001\002\000\032\023\ufff7\024\ufff7\025\ufff7\030" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\001\002\000\012\015\uffef\023\uffef\024" +
    "\uffef\025\uffef\001\002\000\034\002\uffd1\017\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\036" +
    "\uffd1\040\uffd1\042\uffd1\043\uffd1\001\002\000\004\016\075" +
    "\001\002\000\026\023\035\024\013\025\030\030\034\032" +
    "\032\033\006\034\031\036\012\042\017\043\036\001\002" +
    "\000\030\017\077\023\035\024\013\025\030\030\034\032" +
    "\032\033\006\034\031\036\012\042\017\043\036\001\002" +
    "\000\034\002\uffc3\017\uffc3\023\uffc3\024\uffc3\025\uffc3\030" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\040\uffc3\042\uffc3" +
    "\043\uffc3\001\002\000\006\026\101\030\103\001\002\000" +
    "\016\004\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\020\uffcc" +
    "\001\002\000\012\004\112\011\111\012\114\013\113\001" +
    "\002\000\016\004\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd" +
    "\020\uffcd\001\002\000\004\015\105\001\002\000\004\016" +
    "\106\001\002\000\026\023\035\024\013\025\030\030\034" +
    "\032\032\033\006\034\031\036\012\042\017\043\036\001" +
    "\002\000\030\017\110\023\035\024\013\025\030\030\034" +
    "\032\032\033\006\034\031\036\012\042\017\043\036\001" +
    "\002\000\034\002\uffb7\017\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\030\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7\040\uffb7\042" +
    "\uffb7\043\uffb7\001\002\000\004\004\122\001\002\000\004" +
    "\004\121\001\002\000\010\004\120\026\uffc9\030\uffc9\001" +
    "\002\000\010\004\117\026\uffca\030\uffca\001\002\000\006" +
    "\026\101\030\103\001\002\000\004\015\uffce\001\002\000" +
    "\006\026\uffc8\030\uffc8\001\002\000\006\026\uffc7\030\uffc7" +
    "\001\002\000\006\026\uffcb\030\uffcb\001\002\000\006\026" +
    "\uffc6\030\uffc6\001\002\000\004\021\uffe6\001\002\000\012" +
    "\026\126\027\130\030\127\031\132\001\002\000\004\021" +
    "\uffe2\001\002\000\014\005\133\006\134\007\137\010\135" +
    "\021\uffe1\001\002\000\012\005\133\006\134\007\137\010" +
    "\135\001\002\000\004\021\uffe0\001\002\000\004\021\uffdf" +
    "\001\002\000\004\021\uffe3\001\002\000\006\026\uffda\030" +
    "\uffda\001\002\000\006\026\uffd9\030\uffd9\001\002\000\006" +
    "\026\uffd7\030\uffd7\001\002\000\006\026\140\030\141\001" +
    "\002\000\006\026\uffd8\030\uffd8\001\002\000\004\021\uffdb" +
    "\001\002\000\004\021\uffdc\001\002\000\006\026\143\030" +
    "\144\001\002\000\004\021\uffde\001\002\000\004\021\uffdd" +
    "\001\002\000\034\002\uffed\017\uffed\023\uffed\024\uffed\025" +
    "\uffed\030\uffed\032\uffed\033\uffed\034\uffed\036\uffed\040\uffed" +
    "\042\uffed\043\uffed\001\002\000\006\030\150\031\151\001" +
    "\002\000\004\015\152\001\002\000\004\015\uffd5\001\002" +
    "\000\004\015\uffd4\001\002\000\004\021\uffd6\001\002\000" +
    "\006\026\101\030\103\001\002\000\004\015\155\001\002" +
    "\000\004\016\156\001\002\000\026\023\035\024\013\025" +
    "\030\030\034\032\032\033\006\034\031\036\012\042\017" +
    "\043\036\001\002\000\030\017\160\023\035\024\013\025" +
    "\030\030\034\032\032\033\006\034\031\036\012\042\017" +
    "\043\036\001\002\000\036\002\uffcf\017\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\040\uffcf\042\uffcf\043\uffcf\001\002\000\004\021" +
    "\uffe4\001\002\000\026\023\ufffe\024\ufffe\025\ufffe\030\ufffe" +
    "\032\ufffe\033\ufffe\034\ufffe\036\ufffe\042\ufffe\043\ufffe\001" +
    "\002\000\004\002\000\001\002\000\006\026\101\030\103" +
    "\001\002\000\004\020\173\001\002\000\004\015\167\001" +
    "\002\000\004\016\170\001\002\000\026\023\035\024\013" +
    "\025\030\030\034\032\032\033\006\034\031\036\012\042" +
    "\017\043\036\001\002\000\030\017\172\023\035\024\013" +
    "\025\030\030\034\032\032\033\006\034\031\036\012\042" +
    "\017\043\036\001\002\000\034\002\uffb9\017\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\036" +
    "\uffb9\040\uffb9\042\uffb9\043\uffb9\001\002\000\006\026\101" +
    "\030\103\001\002\000\004\015\uffb8\001\002\000\004\002" +
    "\001\001\002\000\004\021\uffe5\001\002\000\004\030\200" +
    "\001\002\000\004\015\201\001\002\000\004\016\202\001" +
    "\002\000\004\037\205\001\002\000\006\037\205\041\216" +
    "\001\002\000\006\037\uffc0\041\uffc0\001\002\000\006\026" +
    "\207\031\210\001\002\000\004\022\211\001\002\000\004" +
    "\022\uffbe\001\002\000\004\022\uffbd\001\002\000\026\023" +
    "\035\024\013\025\030\030\034\032\032\033\006\034\031" +
    "\036\012\042\017\043\036\001\002\000\030\023\035\024" +
    "\013\025\030\030\034\032\032\033\006\034\031\036\012" +
    "\040\213\042\017\043\036\001\002\000\006\037\uffbf\041" +
    "\uffbf\001\002\000\006\037\uffc1\041\uffc1\001\002\000\004" +
    "\017\222\001\002\000\004\022\217\001\002\000\026\023" +
    "\035\024\013\025\030\030\034\032\032\033\006\034\031" +
    "\036\012\042\017\043\036\001\002\000\030\023\035\024" +
    "\013\025\030\030\034\032\032\033\006\034\031\036\012" +
    "\040\221\042\017\043\036\001\002\000\004\017\uffbc\001" +
    "\002\000\034\002\uffc2\017\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\030\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\040\uffc2\042" +
    "\uffc2\043\uffc2\001\002\000\004\014\224\001\002\000\012" +
    "\015\225\023\055\024\053\025\050\001\002\000\004\016" +
    "\233\001\002\000\012\015\227\023\055\024\053\025\050" +
    "\001\002\000\004\016\230\001\002\000\026\023\035\024" +
    "\013\025\030\030\034\032\032\033\006\034\031\036\012" +
    "\042\017\043\036\001\002\000\030\017\232\023\035\024" +
    "\013\025\030\030\034\032\032\033\006\034\031\036\012" +
    "\042\017\043\036\001\002\000\032\023\ufffa\024\ufffa\025" +
    "\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\001\002\000\026\023\035\024" +
    "\013\025\030\030\034\032\032\033\006\034\031\036\012" +
    "\042\017\043\036\001\002\000\030\017\235\023\035\024" +
    "\013\025\030\030\034\032\032\033\006\034\031\036\012" +
    "\042\017\043\036\001\002\000\032\023\ufff9\024\ufff9\025" +
    "\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\001\002\000\004\030\237\001" +
    "\002\000\004\015\240\001\002\000\004\021\uffd3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\046\002\021\003\013\004\025\005\004\007" +
    "\037\011\022\012\015\013\032\014\020\015\014\021\023" +
    "\023\024\024\017\025\036\032\010\036\026\037\006\040" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\011\174" +
    "\012\015\013\032\014\020\015\014\021\023\023\024\024" +
    "\017\025\036\032\010\036\026\037\006\040\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\161\004\025\005\004\007\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\072\001\001\000\002\001\001\000" +
    "\004\010\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\053\042\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\011" +
    "\063\012\015\013\032\014\020\015\014\021\023\023\024" +
    "\024\017\025\036\032\010\036\026\037\006\040\003\044" +
    "\062\001\001\000\034\011\064\012\015\013\032\014\020" +
    "\015\014\021\023\023\024\024\017\025\036\032\010\036" +
    "\026\037\006\040\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\011\063\012\015\013" +
    "\032\014\020\015\014\021\023\023\024\024\017\025\036" +
    "\032\010\036\026\037\006\040\003\044\067\001\001\000" +
    "\034\011\064\012\015\013\032\014\020\015\014\021\023" +
    "\023\024\024\017\025\036\032\010\036\026\037\006\040" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\011\063\012\015\013" +
    "\032\014\020\015\014\021\023\023\024\024\017\025\036" +
    "\032\010\036\026\037\006\040\003\044\075\001\001\000" +
    "\034\011\064\012\015\013\032\014\020\015\014\021\023" +
    "\023\024\024\017\025\036\032\010\036\026\037\006\040" +
    "\003\001\001\000\002\001\001\000\006\026\103\027\101" +
    "\001\001\000\002\001\001\000\004\030\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\011\063\012\015\013\032\014\020\015\014\021\023\023" +
    "\024\024\017\025\036\032\010\036\026\037\006\040\003" +
    "\044\106\001\001\000\034\011\064\012\015\013\032\014" +
    "\020\015\014\021\023\023\024\024\017\025\036\032\010" +
    "\036\026\037\006\040\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\124\017\130\001" +
    "\001\000\002\001\001\000\004\020\141\001\001\000\004" +
    "\020\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\153\027\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\011\063\012\015" +
    "\013\032\014\020\015\014\021\023\023\024\024\017\025" +
    "\036\032\010\036\026\037\006\040\003\044\156\001\001" +
    "\000\034\011\064\012\015\013\032\014\020\015\014\021" +
    "\023\023\024\024\017\025\036\032\010\036\026\037\006" +
    "\040\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\164\041\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\011\063\012\015\013\032\014\020\015\014" +
    "\021\023\023\024\024\017\025\036\032\010\036\026\037" +
    "\006\040\003\044\170\001\001\000\034\011\064\012\015" +
    "\013\032\014\020\015\014\021\023\023\024\024\017\025" +
    "\036\032\010\036\026\037\006\040\003\001\001\000\002" +
    "\001\001\000\004\027\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\203\043\202\001" +
    "\001\000\006\034\213\035\214\001\001\000\002\001\001" +
    "\000\004\033\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\011\063\012\015\013\032" +
    "\014\020\015\014\021\023\023\024\024\017\025\036\032" +
    "\010\036\026\037\006\040\003\044\211\001\001\000\034" +
    "\011\064\012\015\013\032\014\020\015\014\021\023\023" +
    "\024\024\017\025\036\032\010\036\026\037\006\040\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\011\063\012\015\013\032" +
    "\014\020\015\014\021\023\023\024\024\017\025\036\032" +
    "\010\036\026\037\006\040\003\044\217\001\001\000\034" +
    "\011\064\012\015\013\032\014\020\015\014\021\023\023" +
    "\024\024\017\025\036\032\010\036\026\037\006\040\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\053\042\225\001\001\000\002\001\001" +
    "\000\004\006\060\001\001\000\002\001\001\000\036\011" +
    "\063\012\015\013\032\014\020\015\014\021\023\023\024" +
    "\024\017\025\036\032\010\036\026\037\006\040\003\044" +
    "\230\001\001\000\034\011\064\012\015\013\032\014\020" +
    "\015\014\021\023\023\024\024\017\025\036\032\010\036" +
    "\026\037\006\040\003\001\001\000\002\001\001\000\036" +
    "\011\063\012\015\013\032\014\020\015\014\021\023\023" +
    "\024\024\017\025\036\032\010\036\026\037\006\040\003" +
    "\044\233\001\001\000\034\011\064\012\015\013\032\014" +
    "\020\015\014\021\023\023\024\024\017\025\036\032\010" +
    "\036\026\037\006\040\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Heap que almacena variables
    private ArrayList<Variable> arrVariables; //Heap que almacena variables
    private ArrayList<String> arrProcedimientos; //Heap que almacena Procedimientos
    private ArrayList<String> arrFunciones; //Heap que almacena Funciones
    //private javax.swing.JTextArea textArea;

    //Constructor
    public parser(Lexer lex, javax.swing.JTextArea text){ //Debo cambiar TextArea por clase Codigo? Yo consideor que no
        super(lex);
        this.arrVariables = new ArrayList<>(); //Arreglo
        this.arrProcedimientos = new ArrayList<>(); //Arreglo de los nombres de procedimientos
        this.arrFunciones = new ArrayList<>(); //Arreglo de los nombres de funciones
    }
     
     /*  */
        String texto = ""; //Texto que iremos acumulando para pasar a Java

        //Getter de txt
        public String getText() {
                return texto;
        }

        /* *************************************************************** */
        /*
        public void report_fatal_error(String message, Object info){
            System.out.println("Public void report_fatal_error");
        }

        public void syntax_error(Symbol cur_token){
            System.out.println("Error: "+cur_token.value.toString());
        }

        public void unrecoveres_syntax_error(Symbol cur_token){
            if(cur_token.sym==sym.EOF){
                System.out.println("Public void unrecoveredsyntax_Error");
            }
        }
        */
        /* ***************************************************************** */

        //Metodo que recorre el arreglo de casos de un Switch
        public String recorrerArrCasos(ArrayList<String> casos){
                String txt = "";
                for(String s : casos){
                        txt += s + "\n";
                }
                return txt;
        }

        //Metodo que recorre el arreglo de instrucciones de una ejecucion (condicion, ciclo o proceso)
        public String recorrerArrInstrucciones(ArrayList<String> instrucciones){
                String txt = "";
                for(String s : instrucciones){
                        txt += s + "\n";
                }
                return txt;
        }

        //Metodo para guardar variable al declararla
        public void guardarVariable(String dataType, String nameVar){
                arrVariables.add(new Variable(dataType,nameVar));
        }

        //Metodo para identificar tipo primitivo de la variable
        public String obtenerTipoVariable(String nameVar) {
                String resultado = "";
                Variable var = buscarVariable(nameVar);

                if (var != null) {
                        switch (var.getTipo()) {
                                case "int":
                                        return "int";
                                case "float":
                                        return "float";
                                case "String":
                                        return "String";
                        }
                } else {
                        System.out.println(var.getNombre() + " no fue encontrado como Variable.");
        }
        return resultado;
    }

        //Metodo para encontrar una variable declarada previamente
        public Variable buscarVariable(String nameVar){
                for(Variable var : arrVariables){
                        if(var.getNombre().equals(nameVar)){
                                return var;
                        }
                }
                return null;
        }

        /* ************************************************************************************************ */
        //Recorre parametros del arreglo global y elimina "_"
        public String recorrerParametros(ArrayList<String> arrParametros){
            String result = "";

            for(String p: arrParametros){
                result += p.replaceAll("_", " "); 
            }
            return result;
        }

        //Metodo para guardar procedimientos (nombre y parametros)
        public void guardarProcedimiento(String nameProcedure){
                arrProcedimientos.add(nameProcedure); //
        }

        //Metodo para guardar funciones (nombre, tipo, parametros)
        public void guardarFuncion(String dataType, String nameFunction){ //COMO HAGO POR EL TIPO, CONCATENADOS COMO UN STR???
                String func = dataType +"_"+ nameFunction;
                arrFunciones.add(func);
        }

        //Metodo para identificar tipo primitivo de la funcion
        //SIN USAR AUN, BORRAR
        /*
        public String obtenerTipoFuncion(String nameFunction) {
                String resultado = "";
                Funcion funct = buscarFunction(nameFunction);

                if (funct != null) {
                        switch (funct.getTipo()) {
                                case "int":
                                        return "int";
                                case "float":
                                        return "float";
                                case "String":
                                        return "String";
                        }
                } else {
                        System.out.println(var.getNombre() + " no fue encontrado como Funcion.");
            }
            return resultado;
        }
        /*
        /* ************************************************************************************************ */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= preejecucion ejecucion 
            {
              Object RESULT =null;
		int preexecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int preexecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object preexec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += preexec.toString() + exec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= ejecucion 
            {
              Object RESULT =null;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += exec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // preejecucion ::= proceso preejecucion 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int preexecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int preexecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object preexec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = proc.toString() + preexec.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // preejecucion ::= proceso 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = proc.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // proceso ::= procedimiento 
            {
              Object RESULT =null;
		int procedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procedright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object proced = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += proced.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proceso",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proceso ::= funcion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += func.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proceso",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedimiento ::= PROCEDIMIENTO NomVariable PAR_A parametros PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int nameProcedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameProcedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nameProced = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 guardarProcedimiento(nameProced.toString()); RESULT = "public static void " + nameProced.toString() + "(" + recorrerParametros(params) + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedimiento ::= PROCEDIMIENTO NomVariable PAR_A PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int nameProcedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameProcedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nameProced = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 guardarProcedimiento(nameProced.toString()); RESULT = "public static void " + nameProced.toString() + "(){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= FUNCION tipoDato NomVariable PAR_A parametros PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object dataType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nameFunc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 guardarFuncion(dataType.toString(), nameFunc.toString()); RESULT = "public static " + dataType.toString() + " " + nameFunc.toString() + "(" + recorrerParametros(params) + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= FUNCION tipoDato NomVariable PAR_A PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object dataType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nameFunc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 guardarFuncion(dataType.toString(), nameFunc.toString()); RESULT = "public static " + dataType.toString() + " " + nameFunc.toString() + "(){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoDato ::= ENTERO 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoDato ::= FLOTANTE 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoDato ::= TEXTO 
            {
              Object RESULT =null;
		 RESULT = "String"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros ::= param 
            {
              ArrayList<String> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(par.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= parametros param 
            {
              ArrayList<String> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> pars = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pars.add(","+ par.toString()); RESULT = pars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= ENTERO NomVariable 
            {
              Object RESULT =null;
		int nameProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameProcedure = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "int_" + nameProcedure.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= FLOTANTE NomVariable 
            {
              Object RESULT =null;
		int nameProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameProcedure = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "float_" + nameProcedure.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= TEXTO NomVariable 
            {
              Object RESULT =null;
		int nameProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameProcedure = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "String_" + nameProcedure.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ejecucion ::= tarea 
            {
              Object RESULT =null;
		int taskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taskright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object task = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = task.toString() + exec.toString() + "\n";*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tarea ::= principales PUNTO_COMA 
            {
              Object RESULT =null;
		int princleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int princright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object princ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 texto += princ.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tarea",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tarea ::= condicionales 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += cond.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tarea",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tarea ::= ciclos 
            {
              Object RESULT =null;
		int cycleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cycleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cycle = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += cycle.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tarea",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // principales ::= declaracion 
            {
              Object RESULT =null;
		int declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declare = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = declare.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // principales ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = asign.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // principales ::= escritura 
            {
              Object RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = write.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // principales ::= lectura 
            {
              Object RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int readright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = read.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion ::= ENTERO NomVariable 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("int",nameVar.toString()); RESULT = "int " + nameVar.toString() +";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion ::= FLOTANTE NomVariable 
            {
              Object RESULT =null;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("float",nameVar.toString()); RESULT = "float " + nameVar.toString()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion ::= TEXTO NomVariable 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("String",nameVar.toString()); RESULT = "String " + nameVar.toString()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion ::= NomVariable IGUAL Cadena 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar + " = " + text + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion ::= NomVariable IGUAL numero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar + " = " + num + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numero ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numero ::= NumDecimal 
            {
              Object RESULT =null;
		int numDecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numDec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numDec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numero ::= operacion 
            {
              Object RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operation.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion ::= NumEntero operando NumEntero 
            {
              Object RESULT =null;
		int numInt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numInt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numInt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numInt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt1.toString() + op.toString() + numInt2.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacion ::= NumEntero operando NomVariable 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString() + op.toString() + nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacion ::= NomVariable operando NomVariable 
            {
              Object RESULT =null;
		int nameVar1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVar1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVar2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVar2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar1.toString() + op.toString() + nameVar2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion ::= NomVariable operando NumEntero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString() + op.toString() + numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operando ::= MAS 
            {
              Object RESULT =null;
		 RESULT =  "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operando ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operando ::= POR 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operando ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // escritura ::= ESCRIBIR PAR_A mensaje PAR_C 
            {
              Object RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object message = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "System.out.println(String.valueOf("+ message.toString() +"));"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mensaje ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mensaje ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lectura ::= LEER PAR_A NomVariable PAR_C 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String result = obtenerTipoVariable(nameVar.toString());
                        if(result.equals("int")){
                                RESULT = nameVar.toString() + " = " + "Integer.parseInt(JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\"));";
                        } else if(result.equals("float")){
                                RESULT = nameVar.toString() + " = " + "Float.parseFloat(JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\"));";
                        } else if(result.equals("String")){
                                RESULT = nameVar.toString() + " = " + "JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\");";
                        }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicionales ::= si 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iff.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicionales ::= si sino 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elsee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iff.toString() + elsee.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicionales ::= conmutador 
            {
              Object RESULT =null;
		int switchhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int switchhright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object switchh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = switchh.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // si ::= SI PAR_A condicion PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if(" + condi.toString() + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion ::= valor comparador valor 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1.toString() + comp.toString() + val2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparador ::= IGUAL IGUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparador ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparador ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparador ::= MAYOR IGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comparador ::= MENOR IGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparador ::= DIF IGUAL 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruc ::= ejecucion 
            {
              ArrayList<String> RESULT =null;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(exec.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruc ::= instruc ejecucion 
            {
              ArrayList<String> RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 instr.add(exec.toString()); RESULT = instr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sino ::= SINO LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  "else{" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conmutador ::= EN_CASO_DE PAR_A NomVariable PAR_C LLAVE_A casos predeterminado LLAVE_C 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> cases = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "switch(" + nameVar + "){" + recorrerArrCasos(cases) + def.toString() + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conmutador",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // casos ::= casos caso 
            {
              ArrayList<String> RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> cases = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cases.add(casee.toString()); RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // casos ::= caso 
            {
              ArrayList<String> RESULT =null;
		int caseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(casee.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // caso ::= CASO numerocadena DOS_PUNTOS instruc FIN_CASO 
            {
              Object RESULT =null;
		int numchainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numchainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object numchain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "case " + numchain.toString() + ":\n" + recorrerArrInstrucciones(instr) + "\nbreak;"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // numerocadena ::= NumEntero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = num.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerocadena",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // numerocadena ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerocadena",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // predeterminado ::= DEPLANO DOS_PUNTOS instruc FIN_CASO 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "default:" + recorrerArrInstrucciones(instr) + "break;"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predeterminado",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ciclos ::= para 
            {
              Object RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = forr.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ciclos ::= mientras 
            {
              Object RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whilee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = whilee.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // para ::= PARA PAR_A param_para PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for(" + par + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // param_para ::= valor COMA valor 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "int i=" + val1 + "; i<" + val2 + "; i++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_para",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // mientras ::= MIENTRAS PAR_A condicion PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "while(" + condi.toString() + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
