
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package menwic.interprete.analizadores.a_sintactico;

import menwic.interprete.analizadores.a_lexico.Lexer;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\006\005\000\002\006\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\006\000\002\013\003\000\002\013" +
    "\003\000\002\014\006\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\016\007\000\002\017\005\000" +
    "\002\020\003\000\002\020\003\000\002\021\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\022\004\000\002\023\004" +
    "\000\002\031\003\000\002\031\003\000\002\032\007\000" +
    "\002\033\005\000\002\024\011\000\002\035\004\000\002" +
    "\035\003\000\002\026\007\000\002\025\003\000\002\025" +
    "\003\000\002\027\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\024\027\030\030\011\031\022\034\027\036" +
    "\024\037\005\040\023\042\010\050\012\001\002\000\026" +
    "\002\uffd4\027\uffd4\030\uffd4\031\uffd4\034\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\042\uffd4\050\uffd4\001\002\000\004\016\146" +
    "\001\002\000\026\002\uffd3\027\uffd3\030\uffd3\031\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\050\uffd3\001\002" +
    "\000\026\002\uffe1\027\uffe1\030\uffe1\031\uffe1\034\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\042\uffe1\050\uffe1\001\002\000\004" +
    "\016\123\001\002\000\004\034\122\001\002\000\004\016" +
    "\113\001\002\000\004\022\ufffa\001\002\000\026\002\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\034\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\042\ufffe\050\ufffe\001\002\000\004\022\ufffb\001\002" +
    "\000\004\002\112\001\002\000\026\002\uffff\027\030\030" +
    "\011\031\022\034\027\036\024\037\005\040\023\042\010" +
    "\050\012\001\002\000\004\022\ufff9\001\002\000\004\022" +
    "\ufff8\001\002\000\004\034\110\001\002\000\004\016\067" +
    "\001\002\000\004\016\062\001\002\000\026\002\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\034\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\042\ufffc\050\ufffc\001\002\000\004\022\061\001\002\000" +
    "\004\005\040\001\002\000\004\034\037\001\002\000\030" +
    "\002\uffe3\027\uffe3\030\uffe3\031\uffe3\034\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\033\042\uffe3\050\uffe3\001\002\000\026" +
    "\002\uffe2\027\uffe2\030\uffe2\031\uffe2\034\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\042\uffe2\050\uffe2\001\002\000\016\027\030" +
    "\030\011\031\022\034\027\036\024\037\005\001\002\000" +
    "\026\002\uffd5\027\uffd5\030\uffd5\031\uffd5\034\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\042\uffd5\050\uffd5\001\002\000\004\022" +
    "\036\001\002\000\034\002\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\034\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\001\002\000\004\022\ufff7\001\002" +
    "\000\012\032\042\033\044\034\043\035\046\001\002\000" +
    "\004\022\ufff3\001\002\000\014\006\047\007\050\010\053" +
    "\011\051\022\ufff2\001\002\000\012\006\047\007\050\010" +
    "\053\011\051\001\002\000\004\022\ufff1\001\002\000\004" +
    "\022\ufff0\001\002\000\004\022\ufff4\001\002\000\006\032" +
    "\uffeb\034\uffeb\001\002\000\006\032\uffea\034\uffea\001\002" +
    "\000\006\032\uffe8\034\uffe8\001\002\000\006\032\054\034" +
    "\055\001\002\000\006\032\uffe9\034\uffe9\001\002\000\004" +
    "\022\uffec\001\002\000\004\022\uffed\001\002\000\006\032" +
    "\057\034\060\001\002\000\004\022\uffef\001\002\000\004" +
    "\022\uffee\001\002\000\026\002\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\034\ufffd\036\ufffd\037\ufffd\040\ufffd\042\ufffd\050\ufffd" +
    "\001\002\000\006\034\064\035\065\001\002\000\004\017" +
    "\066\001\002\000\004\017\uffe6\001\002\000\004\017\uffe5" +
    "\001\002\000\004\022\uffe7\001\002\000\006\032\070\034" +
    "\072\001\002\000\016\005\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\017\uffdd\021\uffdd\001\002\000\012\005\077\012\076\013" +
    "\101\014\100\001\002\000\016\005\uffde\012\uffde\013\uffde" +
    "\014\uffde\017\uffde\021\uffde\001\002\000\004\017\074\001" +
    "\002\000\016\027\030\030\011\031\022\034\027\036\024" +
    "\037\005\001\002\000\030\002\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\050\uffe0\001\002\000\004\005\107\001\002\000\004\005" +
    "\106\001\002\000\010\005\105\032\uffda\034\uffda\001\002" +
    "\000\010\005\104\032\uffdb\034\uffdb\001\002\000\006\032" +
    "\070\034\072\001\002\000\004\017\uffdf\001\002\000\006" +
    "\032\uffd9\034\uffd9\001\002\000\006\032\uffd8\034\uffd8\001" +
    "\002\000\006\032\uffdc\034\uffdc\001\002\000\006\032\uffd7" +
    "\034\uffd7\001\002\000\004\022\ufff5\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002\000\006\032\070" +
    "\034\072\001\002\000\004\021\120\001\002\000\004\017" +
    "\116\001\002\000\016\027\030\030\011\031\022\034\027" +
    "\036\024\037\005\001\002\000\026\002\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2" +
    "\050\uffd2\001\002\000\006\032\070\034\072\001\002\000" +
    "\004\017\uffd1\001\002\000\004\022\ufff6\001\002\000\004" +
    "\034\124\001\002\000\004\017\125\001\002\000\004\044" +
    "\130\001\002\000\006\044\130\046\141\001\002\000\006" +
    "\044\uffce\046\uffce\001\002\000\006\032\132\035\133\001" +
    "\002\000\004\023\134\001\002\000\004\023\uffcc\001\002" +
    "\000\004\023\uffcb\001\002\000\016\027\030\030\011\031" +
    "\022\034\027\036\024\037\005\001\002\000\004\045\136" +
    "\001\002\000\006\044\uffcd\046\uffcd\001\002\000\006\044" +
    "\uffcf\046\uffcf\001\002\000\004\043\145\001\002\000\004" +
    "\023\142\001\002\000\016\027\030\030\011\031\022\034" +
    "\027\036\024\037\005\001\002\000\004\047\144\001\002" +
    "\000\004\043\uffca\001\002\000\026\002\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0" +
    "\050\uffd0\001\002\000\004\034\147\001\002\000\004\017" +
    "\150\001\002\000\004\022\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\034\002\015\003\025\004\016\005\014\006" +
    "\012\012\017\014\020\015\013\016\030\024\006\030\005" +
    "\031\024\032\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\110\003\025\004\016\005\014\006\012\012\017\014" +
    "\020\015\013\016\030\024\006\030\005\031\024\032\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\031\001\001\000\002\001\001\000\016\003\034" +
    "\005\014\006\012\012\017\014\020\022\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\040\010\044\001\001\000\002\001" +
    "\001\000\004\011\055\001\001\000\004\011\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\072\020\070\001\001\000\002\001\001\000" +
    "\004\021\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\034\005\014\006\012\012\017\014\020\022" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\113" +
    "\033\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\034\005\014\006\012\012\017\014\020\022\116" +
    "\001\001\000\002\001\001\000\004\020\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\126\035\125\001\001\000\006\026" +
    "\136\027\137\001\001\000\002\001\001\000\004\025\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\034\005\014\006\012\012\017\014\020" +
    "\022\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\034\005\014\006\012\012\017\014\020\022\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Heap que almacena variables
    private ArrayList<Variable> arrVariables;
    //private javax.swing.JTextArea textArea;


    public parser(Lexer lex, javax.swing.JTextArea text){ //Debo cambiar TextArea por clase Codigo? Yo consideor que no
        super(lex);
        this.arrVariables = new ArrayList<>();
    }
     
     /*  */
        String texto = ""; //Texto que iremos acumulando para pasar a Java

        //Getter de txt
        public String getText() {
                return texto;
        }

        //Metodo que recorre el arreglo de casos de un Switch
        public String recorrerArrCasos(ArrayList<String> casos){
                String txt = "";
                for(String s : casos){
                        txt += s + "\n";
                }
                return txt;
        }

        //Metodo para guardar variable al declararla
        public void guardarVariable(String dataType, String nameVar){
                arrVariables.add(new Variable(dataType,nameVar));
        }

        //Metodo para identificar tipo primitivo de la variable
        public String obtenerTipoVariable(String nameVar) {
                String resultado = "";
                Variable var = buscarVariable(nameVar);

                if (var != null) {
                        switch (var.getTipo()) {
                                case "int":
                                        return "int";
                                case "float":
                                        return "float";
                                case "String":
                                        return "String";
                        }
                } else {
                        System.out.println(var.getNombre() + " no fue encontrado como Variable.");
        }
        return resultado;
    }

        //Metodo para encontrar una variable declarada previamente
        public Variable buscarVariable(String nameVar){
                for(Variable var : arrVariables){
                        if(var.getNombre().equals(nameVar)){
                                return var;
                        }
                }
                return null;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= ejecucion inicio 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= ejecucion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ejecucion ::= condicionales 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += cond.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ejecucion ::= principales PUNTO_COMA 
            {
              Object RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 texto += init.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ejecucion ::= ciclos 
            {
              Object RESULT =null;
		int cycleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cycleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cycle = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += cycle.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // principales ::= declaracion 
            {
              Object RESULT =null;
		int declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declare = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = declare.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // principales ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = asign.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // principales ::= escritura 
            {
              Object RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = write.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // principales ::= lectura 
            {
              Object RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int readright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = read.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= ENTERO NomVariable 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("int",nameVar.toString()); RESULT = "int " + nameVar.toString() +";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= FLOTANTE NomVariable 
            {
              Object RESULT =null;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("float",nameVar.toString()); RESULT = "float " + nameVar.toString()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= TEXTO NomVariable 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("String",nameVar.toString()); RESULT = "String " + nameVar.toString()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacion ::= NomVariable IGUAL Cadena 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar + " = " + text + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= NomVariable IGUAL numero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar + " = " + num + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numero ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numero ::= NumDecimal 
            {
              Object RESULT =null;
		int numDecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numDec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numDec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numero ::= operacion 
            {
              Object RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operation.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= NumEntero operando NumEntero 
            {
              Object RESULT =null;
		int numInt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numInt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numInt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numInt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt1.toString() + op + numInt2.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= NumEntero operando NomVariable 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString() + op.toString() + nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= NomVariable operando NomVariable 
            {
              Object RESULT =null;
		int nameVar1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVar1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVar2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVar2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar1.toString() + op + nameVar2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacion ::= NomVariable operando NumEntero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString() + op.toString() + numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operando ::= MAS 
            {
              Object RESULT =null;
		 RESULT =  "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operando ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operando ::= POR 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operando ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // escritura ::= ESCRIBIR PAR_A mensaje PAR_C 
            {
              Object RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object message = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "System.out.println(String.valueOf("+ message.toString() +"));"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mensaje ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mensaje ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lectura ::= LEER PAR_A NomVariable PAR_C 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String result = obtenerTipoVariable(nameVar.toString());
                        if(result.equals("int")){
                                RESULT = nameVar.toString() + " = " + "Integer.parseInt(JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\"));";
                        } else if(result.equals("float")){
                                RESULT = nameVar.toString() + " = " + "Float.parseFloat(JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\"));";
                        } else if(result.equals("String")){
                                RESULT = nameVar.toString() + " = " + "JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\");";
                        }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicionales ::= si 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iff.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicionales ::= si sino 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elsee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iff.toString() + elsee.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicionales ::= conmutador 
            {
              Object RESULT =null;
		int switchhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int switchhright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object switchh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = switchh.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // si ::= SI PAR_A condicion PAR_C instruc 
            {
              Object RESULT =null;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "if(" + condi.toString() + "){" + instr.toString() + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= valor comparador valor 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1.toString() + comp.toString() + val2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= IGUAL IGUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= MAYOR IGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparador ::= MENOR IGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparador ::= DIF IGUAL 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruc ::= principales PUNTO_COMA 
            {
              Object RESULT =null;
		int princleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int princright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object princ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = princ.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sino ::= SINO instruc 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  "else{" + instr.toString() + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ciclos ::= para 
            {
              Object RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = forr.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ciclos ::= mientras 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // para ::= PARA PAR_A param PAR_C instruc 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "for(" + par + "){" + instr + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param ::= valor COMA valor 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "int i=" + val1 + "; i<" + val2 + "; i++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conmutador ::= EN_CASO_DE PAR_A NomVariable PAR_C casos predeterminado FIN_EN_CASO_DE 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> cases = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "switch(" + nameVar + "){" + recorrerArrCasos(cases) + def.toString() + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conmutador",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // casos ::= casos caso 
            {
              ArrayList<String> RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> cases = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cases.add(casee.toString()); RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // casos ::= caso 
            {
              ArrayList<String> RESULT =null;
		int caseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(casee.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // caso ::= CASO numerocadena DOS_PUNTOS instruc FIN_CASO 
            {
              Object RESULT =null;
		int numchainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numchainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object numchain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "case " + numchain.toString() + ":\n" + instr + "\nbreak;"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // numerocadena ::= NumEntero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = num.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerocadena",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // numerocadena ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerocadena",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // predeterminado ::= DEPLANO DOS_PUNTOS instruc FIN_DEPLANO 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "default:" + instr + "break;"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predeterminado",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
