
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package menwic.interprete.analizadores.a_sintactico;

import menwic.interprete.analizadores.a_lexico.Lexer;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\005\005\000\002\005\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\006\000\002\012\003\000\002\012\003\000\002\013" +
    "\007\000\002\014\003\000\002\015\011\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\020\003\000\002\021" +
    "\004\000\002\022\003\000\002\023\007\000\002\024\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\022\026\023\027\006\030\021\033\022\035" +
    "\020\036\005\037\017\041\007\001\002\000\024\002\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\033\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\041\uffd7\001\002\000\004\016\125\001\002\000\004" +
    "\033\123\001\002\000\004\016\112\001\002\000\004\022" +
    "\111\001\002\000\024\002\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\033\ufffe\035\ufffe\036\ufffe\037\ufffe\041\ufffe\001\002\000" +
    "\024\002\110\026\023\027\006\030\021\033\022\035\020" +
    "\036\005\037\017\041\007\001\002\000\024\002\uffff\026" +
    "\uffff\027\uffff\030\uffff\033\uffff\035\uffff\036\uffff\037\uffff" +
    "\041\uffff\001\002\000\024\002\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\001\002" +
    "\000\004\022\106\001\002\000\024\002\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\033\ufffb\035\ufffb\036\ufffb\037\ufffb\041\ufffb" +
    "\001\002\000\004\016\060\001\002\000\004\016\053\001" +
    "\002\000\004\033\051\001\002\000\004\005\030\001\002" +
    "\000\004\033\026\001\002\000\024\002\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa\041\ufffa" +
    "\001\002\000\024\002\uffe4\026\uffe4\027\uffe4\030\uffe4\033" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\041\uffe4\001\002\000\004" +
    "\022\027\001\002\000\024\002\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\001\002" +
    "\000\012\031\031\032\034\033\033\034\036\001\002\000" +
    "\014\006\037\007\040\010\043\011\042\022\ufff3\001\002" +
    "\000\004\022\ufff4\001\002\000\012\006\037\007\040\010" +
    "\043\011\042\001\002\000\004\022\ufff2\001\002\000\004" +
    "\022\ufff1\001\002\000\004\022\ufff5\001\002\000\006\031" +
    "\uffec\033\uffec\001\002\000\006\031\uffeb\033\uffeb\001\002" +
    "\000\006\031\044\033\045\001\002\000\006\031\uffe9\033" +
    "\uffe9\001\002\000\006\031\uffea\033\uffea\001\002\000\004" +
    "\022\uffed\001\002\000\004\022\uffee\001\002\000\006\031" +
    "\047\033\050\001\002\000\004\022\ufff0\001\002\000\004" +
    "\022\uffef\001\002\000\004\022\052\001\002\000\024\002" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\033\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\041\ufff6\001\002\000\006\033\054\034\056\001" +
    "\002\000\004\017\uffe7\001\002\000\004\017\057\001\002" +
    "\000\004\017\uffe6\001\002\000\004\022\uffe8\001\002\000" +
    "\004\020\061\001\002\000\006\031\062\033\063\001\002" +
    "\000\012\005\072\012\071\013\074\014\073\001\002\000" +
    "\012\005\072\012\071\013\074\014\073\001\002\000\004" +
    "\020\065\001\002\000\004\017\066\001\002\000\022\026" +
    "\023\027\006\030\021\033\022\035\020\036\005\037\017" +
    "\041\007\001\002\000\024\002\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\001\002" +
    "\000\024\002\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\041\uffe3\001\002\000\004\005\103" +
    "\001\002\000\004\005\102\001\002\000\010\005\101\031" +
    "\uffdd\033\uffdd\001\002\000\010\005\100\031\uffde\033\uffde" +
    "\001\002\000\006\031\076\033\077\001\002\000\004\020" +
    "\uffe1\001\002\000\004\020\uffe2\001\002\000\006\031\uffdc" +
    "\033\uffdc\001\002\000\006\031\uffdb\033\uffdb\001\002\000" +
    "\006\031\uffdf\033\uffdf\001\002\000\006\031\uffda\033\uffda" +
    "\001\002\000\004\031\105\001\002\000\004\020\uffe0\001" +
    "\002\000\024\002\ufffc\026\ufffc\027\ufffc\030\ufffc\033\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\041\ufffc\001\002\000\024\002" +
    "\001\026\001\027\001\030\001\033\001\035\001\036\001" +
    "\037\001\041\001\001\002\000\004\002\000\001\002\000" +
    "\024\002\ufffd\026\ufffd\027\ufffd\030\ufffd\033\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\041\ufffd\001\002\000\004\016\113\001" +
    "\002\000\004\031\117\001\002\000\004\017\115\001\002" +
    "\000\022\026\023\027\006\030\021\033\022\035\020\036" +
    "\005\037\017\041\007\001\002\000\024\002\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6\041" +
    "\uffd6\001\002\000\004\021\120\001\002\000\004\031\121" +
    "\001\002\000\004\017\122\001\002\000\004\017\uffd5\001" +
    "\002\000\004\022\124\001\002\000\024\002\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7\041" +
    "\ufff7\001\002\000\004\033\126\001\002\000\004\017\127" +
    "\001\002\000\004\022\130\001\002\000\024\002\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\041\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\026\002\011\003\012\004\010\005\007\011" +
    "\014\013\015\014\013\015\024\022\023\023\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\106\004\010\005\007\011\014\013\015\014\013\015" +
    "\024\022\023\023\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\031\007\034" +
    "\001\001\000\004\010\045\001\001\000\002\001\001\000" +
    "\004\010\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\063\001\001\000\004\017\103\001\001\000" +
    "\004\017\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\066\004\010\005\007\011\014\013\015\014" +
    "\013\015\024\020\067\022\023\023\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\066\004\010\005\007\011\014\013\015\014\013\015\024" +
    "\020\115\022\023\023\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Heap que almacena variables
    private ArrayList<Variable> arrVariables;
    private javax.swing.JTextArea textArea;

    public parser(Lexer lex, javax.swing.JTextArea text){
        super(lex);

        this.arrVariables = new ArrayList<>();
        this.textArea = text;
    }
     
     /*DECLARAR VARIABLE*/
    //Metodo para guardar variable en Java
    public void guardarVariable(String dataType, String nameVar){
        arrVariables.add(new Variable(dataType,nameVar, ""));
    }

    /*ASIGNAR VARIABLE*/
    //Metodo principal para settear atributos de una variable pre-creada
    public void asignarVariable(String nameVar, String chain){
        Variable varTemp = buscarVariable(nameVar); 

        if(varTemp != null){ //si la variable retornada no es nula, se encontro
            
            if(varTemp.getTipo().equals("int")&& esNumero(chain)){ //es entero
                    varTemp.setValor(chain);
            } else if(varTemp.getTipo().equals("float") && esFloat(chain)){ //esFloat
                    varTemp.setValor(chain);
            } else if(varTemp.getTipo().equals("String")) { //Es cadena
                varTemp.setValor(chain);
                textArea.append(varTemp.getValor() + " asignado a variable " + varTemp.getNombre()+"\n");
            } else {
                textArea.append(varTemp.getNombre()+" es "+varTemp.getTipo()+", no puede recibir "+chain+"\n");
            } 
        } else{
            textArea.append("No se encontro la variable " + nameVar+"\n");
        }
    }

    //Metodo Secundario de Asignar que busca una variable por nombre
    public Variable buscarVariable(String nameVar){
        //recorrer variables almacenadas
        for(Variable variable: arrVariables){
            if(variable.getNombre().equals(nameVar)){
            return variable;
            }
        }
        return null;
    }

    //Metodo Ternario que realiza operacion matematica para obtener resultado que sera vlor de una variable
    public int operacion(String val1, String operando, String val2){
        //Valores recibidos ya parseados
        int num1 = 0;
        int num2 = 0;
        int resultado = 0;

        switch (operando) {
        case "+":
            //Val1
            num1 = convertirAEntero(val1);
            //Val2
            num2 = convertirAEntero(val2);
            return resultado = num1 + num2;

        case "-":
            //Val1
            num1 = convertirAEntero(val1);
            //Val2
            num2 = convertirAEntero(val2);
            return resultado = num1 - num2;

        case "*":
            //Val1
            num1 = convertirAEntero(val1);
            //Val2
            num2 = convertirAEntero(val2);
            return resultado = num1 * num2;

        case "/":
            //Val2 (no puede dividirse entre 0)
            num2 = convertirAEntero(val2);

            if(num2 != 0){
                //Val1
                num1 = convertirAEntero(val1);
                return resultado = num1 / num2;
            } else{
                JOptionPane.showMessageDialog(null, "Error: "+num1+" no puede dividirse entre "+num2+"!");
                return resultado;
            }
    
        default:
            JOptionPane.showMessageDialog(null,"Error: El simbolo de operacion no fue ningun caso aceptado, revise");
            return resultado;
        }
    }

//Metodo para pasar a entero
    public int convertirAEntero(String val) {
        int numTemp = 0;

        //1 solo Val
        if (esNumero(val)){ //si es numero entero
                numTemp = Integer.valueOf(val);
                return numTemp;
        } else{ //como no fue num int, sera variable
            String valorTemp = buscarVariable(val).getValor();
            
            if(esNumero(valorTemp)){ //si la variable es num int
                numTemp = Integer.valueOf(valorTemp);
                return numTemp;
            }
        }
        return numTemp;
    }

    //Metodo para verificar si un valor es de tipo entero
    private boolean esNumero(String val){
        try {
            Double.parseDouble(val);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Metodo para verificar si un valor es de tipo entero
    private boolean esFloat(String val){
        try {
            Float.parseFloat(val);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /*ESCRITURA*/
    //metodo principal que escribe lo que esta entre parentesis (verifica si es texto o si es variable)
     public void escribir(String data){
        //Verificar si trae comillas, si si, se imprime, si no, se busca var y valor e imprimir valor
        if(data.contains("\"")){
            textArea.append(data.replaceAll("\"", "")+"\n"); //sin comillas
            System.out.println(data.replaceAll("\"", "")); //RECORDAR PASAR AL TEXT AREA, NO A TERMINAL
        } else{ //como no es texto, buscamos variable.valor e imprimimos
            Variable varTemp = buscarVariable(data);

            if(varTemp != null){ //si la variable retornada no es nula, se encontro
                textArea.append(varTemp.getValor()+"\n"); //sin comillas
                System.out.println(varTemp.getValor());
            } else{
                textArea.append("var "+data+" no declarada\n");
            }
        }
    }

    /*LECTURA*/
    public void lectura(String nameVar){
        String userInput = JOptionPane.showInputDialog(null, "Ingrese su dato: ");
        asignarVariable(nameVar, userInput);
    }

   public void report_fatal_error(String message,Object info){
        System.out.println("Public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token){
        System.out.println("Syntax error: "+cur_token.value.toString());
    }

    public void unrecoveres_syntax_error(Symbol cur_token){
        if(cur_token.sym==sym.EOF){
            System.out.println("Public void unrecoveredsyntax_Error");
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= inicio ejecucion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= ejecucion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ejecucion ::= declaracion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ejecucion ::= asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ejecucion ::= escritura PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ejecucion ::= lectura 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ejecucion ::= ciclo 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ejecucion ::= condicional 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= ENTERO NomVariable PUNTO_COMA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 guardarVariable("int",nameVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= FLOTANTE NomVariable PUNTO_COMA 
            {
              Object RESULT =null;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 guardarVariable("float",nameVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= TEXTO NomVariable PUNTO_COMA 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 guardarVariable("String",nameVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= NomVariable IGUAL Cadena 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int chainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object chain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 asignarVariable(nameVar.toString(), chain.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacion ::= NomVariable IGUAL num 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 asignarVariable(nameVar.toString(), value.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // num ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // num ::= NumDecimal 
            {
              Object RESULT =null;
		int numDecimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numDecimal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numDecimal.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // num ::= operacion 
            {
              Object RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operation.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion ::= NumEntero operando NumEntero 
            {
              Object RESULT =null;
		int numInt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numInt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numInt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numInt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operacion(numInt1.toString(), op.toString(), numInt2.toString());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= NumEntero operando NomVariable 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operacion(numInt.toString(), op.toString(), nameVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= NomVariable operando NomVariable 
            {
              Object RESULT =null;
		int nameVar1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVar1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVar2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVar2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operacion(nameVar1.toString(), op.toString(), nameVar2.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= NomVariable operando NumEntero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operacion(nameVar.toString(), op.toString(), numInt.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operando ::= MAS 
            {
              Object RESULT =null;
		 RESULT =  "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operando ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operando ::= POR 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operando ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // escritura ::= ESCRIBIR PAR_A escribir PAR_C 
            {
              Object RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 escribir(write.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // escribir ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribir",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // escribir ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribir",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lectura ::= LEER PAR_A NomVariable PAR_C PUNTO_COMA 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 lectura(nameVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicional ::= si 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // si ::= SI PAR_A COMILLA condicion COMILLA PAR_C instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= NomVariable comparador NomVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= NomVariable comparador NumEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= NumEntero comparador NumEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparador ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= MAYOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= MENOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= DIF IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr ::= ejecucion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sino ::= SINO instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ciclo ::= para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // para ::= PARA PAR_A param PAR_C instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // param ::= PAR_A NumEntero COMA NumEntero PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
