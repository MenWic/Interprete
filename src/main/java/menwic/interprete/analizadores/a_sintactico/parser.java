
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package menwic.interprete.analizadores.a_sintactico;

import menwic.interprete.analizadores.a_lexico.Lexer;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\012\000\002\005\011\000" +
    "\002\007\015\000\002\007\014\000\002\045\003\000\002" +
    "\045\005\000\002\006\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\004\000\002\013\003\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\006\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\006\000\002\025\006\000\002\025" +
    "\006\000\002\046\003\000\002\046\005\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\003\000" +
    "\002\027\004\000\002\027\003\000\002\030\011\000\002" +
    "\031\005\000\002\032\003\000\002\032\003\000\002\033" +
    "\004\000\002\033\003\000\002\033\003\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\050\003\000" +
    "\002\050\004\000\002\034\006\000\002\035\012\000\002" +
    "\047\004\000\002\047\003\000\002\037\007\000\002\036" +
    "\003\000\002\036\003\000\002\040\006\000\002\041\003" +
    "\000\002\041\003\000\002\043\011\000\002\044\005\000" +
    "\002\042\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\032\023\036\024\012\025\033\030\035\032" +
    "\031\033\005\034\030\036\010\042\014\043\037\044\007" +
    "\045\042\001\002\000\036\002\uffae\017\uffae\023\uffae\024" +
    "\uffae\025\uffae\030\uffae\032\uffae\033\uffae\034\uffae\036\uffae" +
    "\040\uffae\042\uffae\043\uffae\046\uffae\001\002\000\004\014" +
    "\262\001\002\000\036\002\uffad\017\uffad\023\uffad\024\uffad" +
    "\025\uffad\030\uffad\032\uffad\033\uffad\034\uffad\036\uffad\040" +
    "\uffad\042\uffad\043\uffad\046\uffad\001\002\000\004\030\247" +
    "\001\002\000\004\014\225\001\002\000\036\002\uffc3\017" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\030\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\036\uffc3\040\uffc3\042\uffc3\043\uffc3\046\uffc3\001" +
    "\002\000\004\030\224\001\002\000\026\023\036\024\012" +
    "\025\033\030\035\032\031\033\005\034\030\036\010\042" +
    "\014\043\037\001\002\000\004\014\212\001\002\000\004" +
    "\021\uffe7\001\002\000\030\002\uffec\023\uffec\024\uffec\025" +
    "\uffec\030\uffec\032\uffec\033\uffec\034\uffec\036\uffec\042\uffec" +
    "\043\uffec\001\002\000\036\002\uffea\017\uffea\023\uffea\024" +
    "\uffea\025\uffea\030\uffea\032\uffea\033\uffea\034\uffea\036\uffea" +
    "\040\uffea\042\uffea\043\uffea\046\uffea\001\002\000\004\021" +
    "\uffe4\001\002\000\004\021\uffe8\001\002\000\004\002\211" +
    "\001\002\000\030\002\uffff\023\036\024\012\025\033\030" +
    "\035\032\031\033\005\034\030\036\010\042\014\043\037" +
    "\001\002\000\032\023\ufffc\024\ufffc\025\ufffc\030\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\036\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\001\002\000\004\021\uffe6\001\002\000\032\023" +
    "\ufffd\024\ufffd\025\ufffd\030\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\036\ufffd\042\ufffd\043\ufffd\044\007\045\042\001\002\000" +
    "\004\021\uffe5\001\002\000\004\014\201\001\002\000\004" +
    "\014\173\001\002\000\036\002\uffe9\017\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9" +
    "\040\uffe9\042\uffe9\043\uffe9\046\uffe9\001\002\000\004\030" +
    "\172\001\002\000\004\021\171\001\002\000\006\004\135" +
    "\014\134\001\002\000\004\030\133\001\002\000\004\014" +
    "\110\001\002\000\040\002\uffc5\017\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5\035\104\036" +
    "\uffc5\040\uffc5\042\uffc5\043\uffc5\046\uffc5\001\002\000\032" +
    "\023\ufffb\024\ufffb\025\ufffb\030\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\036\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\001\002" +
    "\000\010\023\046\024\044\025\043\001\002\000\004\030" +
    "\uffee\001\002\000\004\030\uffef\001\002\000\004\030\047" +
    "\001\002\000\004\030\ufff0\001\002\000\004\014\050\001" +
    "\002\000\012\015\051\023\046\024\044\025\043\001\002" +
    "\000\004\016\076\001\002\000\006\015\057\020\056\001" +
    "\002\000\004\030\055\001\002\000\006\015\ufff6\020\ufff6" +
    "\001\002\000\006\015\ufff4\020\ufff4\001\002\000\010\023" +
    "\046\024\044\025\043\001\002\000\004\016\060\001\002" +
    "\000\026\023\036\024\012\025\033\030\035\032\031\033" +
    "\005\034\030\036\010\042\014\043\037\001\002\000\030" +
    "\023\036\024\012\025\033\030\035\032\031\033\005\034" +
    "\030\036\010\042\014\043\037\046\064\001\002\000\034" +
    "\017\uffb8\023\uffb8\024\uffb8\025\uffb8\030\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\036\uffb8\040\uffb8\042\uffb8\043\uffb8\046\uffb8" +
    "\001\002\000\034\017\uffb7\023\uffb7\024\uffb7\025\uffb7\030" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7\040\uffb7\042\uffb7" +
    "\043\uffb7\046\uffb7\001\002\000\012\026\070\027\073\030" +
    "\072\031\074\001\002\000\004\021\066\001\002\000\004" +
    "\017\067\001\002\000\032\023\ufff8\024\ufff8\025\ufff8\030" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\001\002\000\012\015\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\001\002\000\004\021\ufff2\001\002\000\004" +
    "\021\ufff3\001\002\000\004\021\ufff1\001\002\000\012\015" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\001\002\000\006\015\ufff5" +
    "\020\ufff5\001\002\000\026\023\036\024\012\025\033\030" +
    "\035\032\031\033\005\034\030\036\010\042\014\043\037" +
    "\001\002\000\030\023\036\024\012\025\033\030\035\032" +
    "\031\033\005\034\030\036\010\042\014\043\037\046\064" +
    "\001\002\000\004\021\101\001\002\000\004\017\102\001" +
    "\002\000\032\023\ufff7\024\ufff7\025\ufff7\030\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\036\ufff7\042\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\001\002\000\036\002\uffc4\017\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\040" +
    "\uffc4\042\uffc4\043\uffc4\046\uffc4\001\002\000\004\016\105" +
    "\001\002\000\026\023\036\024\012\025\033\030\035\032" +
    "\031\033\005\034\030\036\010\042\014\043\037\001\002" +
    "\000\030\017\107\023\036\024\012\025\033\030\035\032" +
    "\031\033\005\034\030\036\010\042\014\043\037\001\002" +
    "\000\036\002\uffb6\017\uffb6\023\uffb6\024\uffb6\025\uffb6\030" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\040\uffb6\042\uffb6" +
    "\043\uffb6\046\uffb6\001\002\000\006\026\111\030\113\001" +
    "\002\000\016\004\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf" +
    "\020\uffbf\001\002\000\012\004\122\011\121\012\124\013" +
    "\123\001\002\000\016\004\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\015\uffc0\020\uffc0\001\002\000\004\015\115\001\002\000" +
    "\004\016\116\001\002\000\026\023\036\024\012\025\033" +
    "\030\035\032\031\033\005\034\030\036\010\042\014\043" +
    "\037\001\002\000\030\017\120\023\036\024\012\025\033" +
    "\030\035\032\031\033\005\034\030\036\010\042\014\043" +
    "\037\001\002\000\036\002\uffaa\017\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\030\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\040" +
    "\uffaa\042\uffaa\043\uffaa\046\uffaa\001\002\000\004\004\132" +
    "\001\002\000\004\004\131\001\002\000\010\004\130\026" +
    "\uffbc\030\uffbc\001\002\000\010\004\127\026\uffbd\030\uffbd" +
    "\001\002\000\006\026\111\030\113\001\002\000\004\015" +
    "\uffc1\001\002\000\006\026\uffbb\030\uffbb\001\002\000\006" +
    "\026\uffba\030\uffba\001\002\000\006\026\uffbe\030\uffbe\001" +
    "\002\000\006\026\uffb9\030\uffb9\001\002\000\004\021\uffe3" +
    "\001\002\000\014\015\160\026\070\027\163\030\162\031" +
    "\074\001\002\000\012\026\137\027\142\030\141\031\144" +
    "\001\002\000\004\021\uffe0\001\002\000\014\005\145\006" +
    "\146\007\151\010\147\021\uffdc\001\002\000\004\021\uffdd" +
    "\001\002\000\016\005\145\006\146\007\151\010\147\014" +
    "\134\021\uffde\001\002\000\004\021\uffdb\001\002\000\004" +
    "\021\uffda\001\002\000\004\021\uffdf\001\002\000\006\026" +
    "\uffd5\030\uffd5\001\002\000\006\026\uffd4\030\uffd4\001\002" +
    "\000\006\026\uffd2\030\uffd2\001\002\000\006\026\152\030" +
    "\153\001\002\000\006\026\uffd3\030\uffd3\001\002\000\004" +
    "\021\uffd6\001\002\000\004\021\uffd7\001\002\000\006\026" +
    "\155\030\156\001\002\000\004\021\uffd9\001\002\000\004" +
    "\021\uffd8\001\002\000\006\015\uffc8\020\uffc8\001\002\000" +
    "\004\021\170\001\002\000\006\015\uffca\020\uffca\001\002" +
    "\000\006\015\uffc6\020\uffc6\001\002\000\006\015\uffc7\020" +
    "\uffc7\001\002\000\006\015\166\020\165\001\002\000\012" +
    "\026\070\027\163\030\162\031\074\001\002\000\006\015" +
    "\uffcc\021\uffcc\001\002\000\006\015\uffc9\020\uffc9\001\002" +
    "\000\006\015\uffcb\021\uffcb\001\002\000\036\002\uffeb\017" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\030\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\036\uffeb\040\uffeb\042\uffeb\043\uffeb\046\uffeb\001" +
    "\002\000\004\021\uffe1\001\002\000\006\030\176\031\177" +
    "\001\002\000\004\015\uffce\001\002\000\004\015\200\001" +
    "\002\000\006\014\134\015\uffd0\001\002\000\004\015\uffcf" +
    "\001\002\000\004\021\uffd1\001\002\000\006\026\111\030" +
    "\113\001\002\000\004\015\203\001\002\000\004\016\204" +
    "\001\002\000\026\023\036\024\012\025\033\030\035\032" +
    "\031\033\005\034\030\036\010\042\014\043\037\001\002" +
    "\000\030\017\206\023\036\024\012\025\033\030\035\032" +
    "\031\033\005\034\030\036\010\042\014\043\037\001\002" +
    "\000\040\002\uffc2\017\uffc2\023\uffc2\024\uffc2\025\uffc2\030" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2" +
    "\042\uffc2\043\uffc2\046\uffc2\001\002\000\026\023\ufffe\024" +
    "\ufffe\025\ufffe\030\ufffe\032\ufffe\033\ufffe\034\ufffe\036\ufffe" +
    "\042\ufffe\043\ufffe\001\002\000\030\002\uffed\023\uffed\024" +
    "\uffed\025\uffed\030\uffed\032\uffed\033\uffed\034\uffed\036\uffed" +
    "\042\uffed\043\uffed\001\002\000\004\002\000\001\002\000" +
    "\006\026\111\030\113\001\002\000\004\020\221\001\002" +
    "\000\004\015\215\001\002\000\004\016\216\001\002\000" +
    "\026\023\036\024\012\025\033\030\035\032\031\033\005" +
    "\034\030\036\010\042\014\043\037\001\002\000\030\017" +
    "\220\023\036\024\012\025\033\030\035\032\031\033\005" +
    "\034\030\036\010\042\014\043\037\001\002\000\036\002" +
    "\uffac\017\uffac\023\uffac\024\uffac\025\uffac\030\uffac\032\uffac" +
    "\033\uffac\034\uffac\036\uffac\040\uffac\042\uffac\043\uffac\046" +
    "\uffac\001\002\000\006\026\111\030\113\001\002\000\004" +
    "\015\uffab\001\002\000\030\002\001\023\036\024\012\025" +
    "\033\030\035\032\031\033\005\034\030\036\010\042\014" +
    "\043\037\001\002\000\004\021\uffe2\001\002\000\004\030" +
    "\226\001\002\000\004\015\227\001\002\000\004\016\230" +
    "\001\002\000\004\037\233\001\002\000\006\037\233\041" +
    "\242\001\002\000\006\037\uffb3\041\uffb3\001\002\000\006" +
    "\026\070\031\074\001\002\000\004\022\235\001\002\000" +
    "\026\023\036\024\012\025\033\030\035\032\031\033\005" +
    "\034\030\036\010\042\014\043\037\001\002\000\030\023" +
    "\036\024\012\025\033\030\035\032\031\033\005\034\030" +
    "\036\010\040\237\042\014\043\037\001\002\000\006\037" +
    "\uffb2\041\uffb2\001\002\000\006\037\uffb4\041\uffb4\001\002" +
    "\000\004\017\246\001\002\000\004\022\243\001\002\000" +
    "\026\023\036\024\012\025\033\030\035\032\031\033\005" +
    "\034\030\036\010\042\014\043\037\001\002\000\030\023" +
    "\036\024\012\025\033\030\035\032\031\033\005\034\030" +
    "\036\010\040\245\042\014\043\037\001\002\000\004\017" +
    "\uffaf\001\002\000\036\002\uffb5\017\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\040" +
    "\uffb5\042\uffb5\043\uffb5\046\uffb5\001\002\000\004\014\250" +
    "\001\002\000\012\015\251\023\046\024\044\025\043\001" +
    "\002\000\004\016\257\001\002\000\006\015\253\020\056" +
    "\001\002\000\004\016\254\001\002\000\026\023\036\024" +
    "\012\025\033\030\035\032\031\033\005\034\030\036\010" +
    "\042\014\043\037\001\002\000\030\017\256\023\036\024" +
    "\012\025\033\030\035\032\031\033\005\034\030\036\010" +
    "\042\014\043\037\001\002\000\032\023\ufffa\024\ufffa\025" +
    "\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\001\002\000\026\023\036\024" +
    "\012\025\033\030\035\032\031\033\005\034\030\036\010" +
    "\042\014\043\037\001\002\000\030\017\261\023\036\024" +
    "\012\025\033\030\035\032\031\033\005\034\030\036\010" +
    "\042\014\043\037\001\002\000\032\023\ufff9\024\ufff9\025" +
    "\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\001\002\000\004\030\263\001" +
    "\002\000\004\015\264\001\002\000\004\021\uffcd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\050\002\021\003\012\004\025\005\023\007" +
    "\040\012\022\013\015\014\033\015\020\016\014\022\024" +
    "\024\026\025\017\027\016\030\037\035\010\041\031\042" +
    "\005\043\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\222\013\015" +
    "\014\033\015\020\016\014\022\024\024\026\025\017\027" +
    "\016\030\037\035\010\041\031\042\005\043\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\013\207\014\033\015\020\016\014\022" +
    "\024\024\026\025\017\027\016\030\037\035\010\041\031" +
    "\042\005\043\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\206\004\025\005\023\007\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\102\001\001\000\002\001\001\000\004\010\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\053\010\052" +
    "\045\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\074\010\052\001\001\000\002\001\001\000\036\013" +
    "\061\014\033\015\020\016\014\022\024\024\026\025\017" +
    "\027\016\030\037\035\010\041\031\042\005\043\003\050" +
    "\060\001\001\000\036\011\064\013\062\014\033\015\020" +
    "\016\014\022\024\024\026\025\017\027\016\030\037\035" +
    "\010\041\031\042\005\043\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\013\061\014\033" +
    "\015\020\016\014\022\024\024\026\025\017\027\016\030" +
    "\037\035\010\041\031\042\005\043\003\050\076\001\001" +
    "\000\036\011\077\013\062\014\033\015\020\016\014\022" +
    "\024\024\026\025\017\027\016\030\037\035\010\041\031" +
    "\042\005\043\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\061\014\033\015\020\016\014\022\024\024" +
    "\026\025\017\027\016\030\037\035\010\041\031\042\005" +
    "\043\003\050\105\001\001\000\034\013\062\014\033\015" +
    "\020\016\014\022\024\024\026\025\017\027\016\030\037" +
    "\035\010\041\031\042\005\043\003\001\001\000\002\001" +
    "\001\000\006\031\113\032\111\001\001\000\002\001\001" +
    "\000\004\033\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\013\061\014\033\015\020" +
    "\016\014\022\024\024\026\025\017\027\016\030\037\035" +
    "\010\041\031\042\005\043\003\050\116\001\001\000\034" +
    "\013\062\014\033\015\020\016\014\022\024\024\026\025" +
    "\017\027\016\030\037\035\010\041\031\042\005\043\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\160\036\156\046\163\001\001\000\010\017" +
    "\135\020\142\025\137\001\001\000\002\001\001\000\004" +
    "\021\153\001\001\000\002\001\001\000\004\021\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\166\036\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\174\025\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\201\032\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\013\061\014\033\015" +
    "\020\016\014\022\024\024\026\025\017\027\016\030\037" +
    "\035\010\041\031\042\005\043\003\050\204\001\001\000" +
    "\034\013\062\014\033\015\020\016\014\022\024\024\026" +
    "\025\017\027\016\030\037\035\010\041\031\042\005\043" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\212\044\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\061\014\033\015\020\016\014\022\024\024" +
    "\026\025\017\027\016\030\037\035\010\041\031\042\005" +
    "\043\003\050\216\001\001\000\034\013\062\014\033\015" +
    "\020\016\014\022\024\024\026\025\017\027\016\030\037" +
    "\035\010\041\031\042\005\043\003\001\001\000\002\001" +
    "\001\000\004\032\221\001\001\000\002\001\001\000\034" +
    "\013\207\014\033\015\020\016\014\022\024\024\026\025" +
    "\017\027\016\030\037\035\010\041\031\042\005\043\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\231\047\230\001\001" +
    "\000\006\037\237\040\240\001\001\000\002\001\001\000" +
    "\004\036\233\001\001\000\002\001\001\000\036\013\061" +
    "\014\033\015\020\016\014\022\024\024\026\025\017\027" +
    "\016\030\037\035\010\041\031\042\005\043\003\050\235" +
    "\001\001\000\034\013\062\014\033\015\020\016\014\022" +
    "\024\024\026\025\017\027\016\030\037\035\010\041\031" +
    "\042\005\043\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\013\061" +
    "\014\033\015\020\016\014\022\024\024\026\025\017\027" +
    "\016\030\037\035\010\041\031\042\005\043\003\050\243" +
    "\001\001\000\034\013\062\014\033\015\020\016\014\022" +
    "\024\024\026\025\017\027\016\030\037\035\010\041\031" +
    "\042\005\043\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\053\010\052\045\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\013\061\014\033\015\020\016\014\022\024" +
    "\024\026\025\017\027\016\030\037\035\010\041\031\042" +
    "\005\043\003\050\254\001\001\000\034\013\062\014\033" +
    "\015\020\016\014\022\024\024\026\025\017\027\016\030" +
    "\037\035\010\041\031\042\005\043\003\001\001\000\002" +
    "\001\001\000\036\013\061\014\033\015\020\016\014\022" +
    "\024\024\026\025\017\027\016\030\037\035\010\041\031" +
    "\042\005\043\003\050\257\001\001\000\034\013\062\014" +
    "\033\015\020\016\014\022\024\024\026\025\017\027\016" +
    "\030\037\035\010\041\031\042\005\043\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Heap que almacena variables
    private ArrayList<Variable> arrVariables; //Heap que almacena variables
    private ArrayList<String> arrProcedimientos; //Heap que almacena Procedimientos
    private ArrayList<String> arrFunciones; //Heap que almacena Funciones
    String txtFunciones = "";
    //private javax.swing.JTextArea textArea;

    //Constructor
    public parser(Lexer lex, javax.swing.JTextArea text){ //Debo cambiar TextArea por clase Codigo? Yo consideor que no
        super(lex);
        this.arrVariables = new ArrayList<>(); //Arreglo
        this.arrProcedimientos = new ArrayList<>(); //Arreglo de los nombres de procedimientos
        this.arrFunciones = new ArrayList<>(); //Arreglo de los nombres de funciones
        //this.txtFunciones = "";
    }
     
        String texto = ""; //Texto que iremos acumulando para pasar a Java

        //Getter de txt
        public String getText() {
                return texto;
        }

        //Getter de txt
        public String getTxtFunciones() {
                return txtFunciones;
        }
        
        public void syntax_error(Symbol cur_token){
            JOptionPane.showMessageDialog(null, "Error, Fila: "+ cur_token.left + ", Columna: " + cur_token.right + ", Lexema: " + cur_token.value.toString());
            //System.out.println("Error: "+ cur_token.left + "," + cur_token.right);
        }
        

        public void unrecoveres_syntax_error(Symbol cur_token){
            if(cur_token.sym==sym.EOF){
                System.out.println("Public void unrecoveredsyntax_Error");
            }
        }
        

        //Metodo que recorre el arreglo de casos de un Switch
        public String recorrerArrCasos(ArrayList<String> casos){
                String txt = "";
                for(String s : casos){
                        txt += s + "\n";
                }
                return txt;
        }

        //Metodo que recorre el arreglo de instrucciones de una ejecucion (condicion, ciclo o proceso)
        public String recorrerArrInstrucciones(ArrayList<String> instrucciones){
                String txt = "";
                for(String s : instrucciones){
                        txt += s + "\n";
                }
                return txt;
        }

        //Metodo para guardar variable al declararla
        public void guardarVariable(String dataType, String nameVar){
                arrVariables.add(new Variable(dataType,nameVar));
        }

        //Metodo para identificar tipo primitivo de la variable
        public String obtenerTipoVariable(String nameVar) {
                String resultado = "";
                Variable var = buscarVariable(nameVar);

                if (var != null) {
                        switch (var.getTipo()) {
                                case "int":
                                        return "int";
                                case "float":
                                        return "float";
                                case "String":
                                        return "String";
                        }
                } else {
                        System.out.println(var.getNombre() + " no fue encontrado como Variable.");
        }
        return resultado;
    }

        //Metodo para encontrar una variable declarada previamente
        public Variable buscarVariable(String nameVar){
                for(Variable var : arrVariables){
                        if(var.getNombre().equals(nameVar)){
                                return var;
                        }
                }
                return null;
        }

        /* ************************************************************************************************ */
        //Recorre parametros del arreglo global y elimina "_"
        public String recorrerParametros(ArrayList<String> arrParametros){
            String result = "";

            for(String p: arrParametros){
                result += p.replaceAll("_", " "); 
            }
            return result;
        }

        //Metodo para guardar procedimientos (nombre y parametros)
        public void guardarProcedimiento(String nameProcedure){
                arrProcedimientos.add(nameProcedure); //
        }

        //Metodo para guardar funciones (nombre, tipo, parametros)
        public void guardarFuncion(String dataType, String nameFunction){ //COMO HAGO POR EL TIPO, CONCATENADOS COMO UN STR???
                String func = dataType +"_"+ nameFunction;
                arrFunciones.add(func);
        }

        //Metodo para recorrer parametros enviados en llamda de funcion
        public String recorrerArrParametrosEnviados(ArrayList<String> arrParametrosEnviados) {
                String result = "";

                for (String pe: arrParametrosEnviados) {
                        result += pe;
                } 
                return result;
        }

        //Metodo para identificar tipo primitivo de la funcion
        //SIN USAR AUN, BORRAR
        /*
        public String obtenerTipoFuncion(String nameFunction) {
                String resultado = "";
                Funcion funct = buscarFunction(nameFunction);

                if (funct != null) {
                        switch (funct.getTipo()) {
                                case "int":
                                        return "int";
                                case "float":
                                        return "float";
                                case "String":
                                        return "String";
                        }
                } else {
                        System.out.println(var.getNombre() + " no fue encontrado como Funcion.");
            }
            return resultado;
        }
        /*
        /* ************************************************************************************************ */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= preejecucion ejecucion 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= ejecucion 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // preejecucion ::= proceso preejecucion 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // preejecucion ::= proceso 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preejecucion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // proceso ::= proced 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 txtFunciones += p.toString() + "\n"; System.out.println(txtFunciones); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proceso",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proceso ::= funcion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 txtFunciones += func.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proceso",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proced ::= PROCEDIMIENTO NomVariable PAR_A parametros PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int nameProcedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameProcedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nameProced = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  guardarProcedimiento(nameProced.toString()); RESULT = "public static void " + nameProced.toString() + "(" + recorrerParametros(params) + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proced",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // proced ::= PROCEDIMIENTO NomVariable PAR_A PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int nameProcedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameProcedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nameProced = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  guardarProcedimiento(nameProced.toString()); RESULT = "public static void " + nameProced.toString() + "(){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proced",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= FUNCION tipoDato NomVariable PAR_A parametros PAR_C LLAVE_A instruc retorno PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object dataType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nameFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object nameFunc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 guardarFuncion(dataType.toString(), nameFunc.toString()); RESULT = "public static " + dataType.toString() + " " + nameFunc.toString() + "(" + recorrerParametros(params) + "){" + recorrerArrInstrucciones(instr) + ret.toString() + ";}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= FUNCION tipoDato NomVariable PAR_A PAR_C LLAVE_A instruc retorno PUNTO_COMA LLAVE_C 
            {
              Object RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object dataType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nameFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object nameFunc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 guardarFuncion(dataType.toString(), nameFunc.toString()); RESULT = "public static " + dataType.toString() + " " + nameFunc.toString() + "(){" + recorrerArrInstrucciones(instr) + ret.toString() + ";}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= param 
            {
              ArrayList<String> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(par.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametros COMA param 
            {
              ArrayList<String> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> pars = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pars.add(","+ par.toString()); RESULT = pars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param ::= tipoDato NomVariable 
            {
              Object RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dataType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameProcedure = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dataType.toString() + "_" + nameProcedure.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // retorno ::= RETORNA NomVariable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 buscarVariable(var.toString()); RESULT =  "return " + var.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // retorno ::= RETORNA numerocadena 
            {
              Object RESULT =null;
		int numchainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numchainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numchain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "return " + numchain.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // retorno ::= RETORNA NumDecimal 
            {
              Object RESULT =null;
		int flotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flotright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object flot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "return " + flot.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipoDato ::= ENTERO 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipoDato ::= FLOTANTE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipoDato ::= TEXTO 
            {
              Object RESULT =null;
		 RESULT = "String"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ejecucion ::= ejecucion tarea 
            {
              Object RESULT =null;
		int taskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taskright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object task = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += task.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ejecucion ::= tarea 
            {
              Object RESULT =null;
		int taskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int taskright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object task = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += task.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tarea ::= principales PUNTO_COMA 
            {
              Object RESULT =null;
		int princleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int princright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object princ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = princ.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tarea",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tarea ::= condicionales 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cond.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tarea",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tarea ::= ciclos 
            {
              Object RESULT =null;
		int cycleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cycleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cycle = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cycle.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tarea",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // principales ::= declaracion 
            {
              Object RESULT =null;
		int declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declare = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = declare.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // principales ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = asign.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // principales ::= escritura 
            {
              Object RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = write.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // principales ::= lectura 
            {
              Object RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int readright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = read.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // principales ::= llamada 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= ENTERO NomVariable 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("int",nameVar.toString()); RESULT = "int " + nameVar.toString() +";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= FLOTANTE NomVariable 
            {
              Object RESULT =null;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("double",nameVar.toString()); RESULT = "double " + nameVar.toString()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= TEXTO NomVariable 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("String",nameVar.toString()); RESULT = "String " + nameVar.toString()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacion ::= NomVariable IGUAL numero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString() + " = " + num.toString() + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion ::= NomVariable IGUAL Cadena 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int chainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object chain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString() + " = " + chain.toString() + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= NomVariable IGUAL NomVariable 
            {
              Object RESULT =null;
		int nameVar1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVar1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameVar2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVar2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar1.toString() + " = " + nameVar2.toString() + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= NomVariable IGUAL llamada 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString() + " = " + call.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // numero ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // numero ::= NumDecimal 
            {
              Object RESULT =null;
		int numDecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numDec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numDec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // numero ::= operacion 
            {
              Object RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operation.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacion ::= NumEntero operando NumEntero 
            {
              Object RESULT =null;
		int numInt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numInt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numInt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numInt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt1.toString() + op.toString() + numInt2.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacion ::= NumEntero operando NomVariable 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString() + op.toString() + nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacion ::= NomVariable operando NomVariable 
            {
              Object RESULT =null;
		int nameVar1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVar1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVar2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVar2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar1.toString() + op.toString() + nameVar2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacion ::= NomVariable operando NumEntero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString() + op.toString() + numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operando ::= MAS 
            {
              Object RESULT =null;
		 RESULT =  "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operando ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operando ::= POR 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operando ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // escritura ::= ESCRIBIR PAR_A mensaje PAR_C 
            {
              Object RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object message = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "System.out.println(String.valueOf("+ message.toString() +"));"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // mensaje ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mensaje ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // mensaje ::= llamada 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lectura ::= LEER PAR_A NomVariable PAR_C 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String result = obtenerTipoVariable(nameVar.toString());
                        if(result.equals("int")){
                                RESULT = nameVar.toString() + " = " + "Integer.parseInt(JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\"));";
                        } else if(result.equals("double")){
                                RESULT = nameVar.toString() + " = " + "Double.parseDouble(JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\"));";
                        } else if(result.equals("String")){
                                RESULT = nameVar.toString() + " = " + "JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\");";
                        }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamada ::= NomVariable PAR_A parametros_enviados PAR_C 
            {
              Object RESULT =null;
		int nameProcessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameProcessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nameProcess = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sent_paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sent_paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> sent_params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = nameProcess.toString() + "(" + recorrerArrParametrosEnviados(sent_params) + ");"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // llamada ::= NomVariable PAR_A PAR_C PUNTO_COMA 
            {
              Object RESULT =null;
		int nameProcessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameProcessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nameProcess = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 /*buscarFuncion(funcName.toString())*/; RESULT = nameProcess.toString() + "();"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros_enviados ::= parametro_enviado 
            {
              ArrayList<String> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(param.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_enviados",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_enviados ::= parametros_enviados COMA parametro_enviado 
            {
              ArrayList<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 params.add("," + param.toString()); RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_enviados",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro_enviado ::= numerocadena 
            {
              Object RESULT =null;
		int numchainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numchainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numchain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numchain.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviado",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametro_enviado ::= NumDecimal 
            {
              Object RESULT =null;
		int flotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flotright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object flot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = flot.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviado",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametro_enviado ::= NomVariable 
            {
              Object RESULT =null;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object paramName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = paramName.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_enviado",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicionales ::= si 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iff.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicionales ::= si sino 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elsee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iff.toString() + elsee.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicionales ::= conmutador 
            {
              Object RESULT =null;
		int switchhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int switchhright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object switchh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = switchh.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // si ::= SI PAR_A condicion PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if(" + condi.toString() + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicion ::= valor comparador valor 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1.toString() + comp.toString() + val2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparador ::= IGUAL IGUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comparador ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comparador ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comparador ::= MAYOR IGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comparador ::= MENOR IGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comparador ::= DIF IGUAL 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruc ::= tarea 
            {
              ArrayList<String> RESULT =null;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(exec.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruc ::= instruc tarea 
            {
              ArrayList<String> RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 instr.add(exec.toString()); RESULT = instr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sino ::= SINO LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  "else{" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conmutador ::= EN_CASO_DE PAR_A NomVariable PAR_C LLAVE_A casos predeterminado LLAVE_C 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> cases = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "switch(" + nameVar + "){" + recorrerArrCasos(cases) + def.toString() + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conmutador",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // casos ::= casos caso 
            {
              ArrayList<String> RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> cases = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cases.add(casee.toString()); RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // casos ::= caso 
            {
              ArrayList<String> RESULT =null;
		int caseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(casee.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // caso ::= CASO numerocadena DOS_PUNTOS instruc FIN_CASO 
            {
              Object RESULT =null;
		int numchainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numchainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object numchain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "case " + numchain.toString() + ":\n" + recorrerArrInstrucciones(instr) + "\nbreak;"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // numerocadena ::= NumEntero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = num.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerocadena",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // numerocadena ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerocadena",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // predeterminado ::= DEPLANO DOS_PUNTOS instruc FIN_CASO 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "default:" + recorrerArrInstrucciones(instr) + "break;"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predeterminado",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ciclos ::= para 
            {
              Object RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = forr.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ciclos ::= mientras 
            {
              Object RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whilee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = whilee.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // para ::= PARA PAR_A param_para PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for(" + par + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // param_para ::= valor COMA valor 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "int i=" + val1 + "; i<" + val2 + "; i++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_para",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // mientras ::= MIENTRAS PAR_A condicion PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "while(" + condi.toString() + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
