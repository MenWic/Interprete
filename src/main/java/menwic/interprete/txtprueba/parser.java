
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package menwic.interprete.txtprueba;

import menwic.interprete.analizadores.a_lexico.Lexer;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import menwic.interprete.analizadores.a_sintactico.Variable;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\006\005\000\002\006\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\006\000\002\013\003\000\002\013" +
    "\003\000\002\014\006\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\016\011\000\002\017\005\000" +
    "\002\020\003\000\002\020\003\000\002\021\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\034\003\000\002\034\004" +
    "\000\002\022\006\000\002\023\012\000\002\033\004\000" +
    "\002\033\003\000\002\025\007\000\002\024\003\000\002" +
    "\024\003\000\002\026\006\000\002\030\003\000\002\030" +
    "\003\000\002\031\011\000\002\032\005\000\002\027\011" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\026\023\030\024\011\025\022\030\027\032" +
    "\024\033\005\034\023\036\010\042\013\043\031\001\002" +
    "\000\034\002\uffcc\017\uffcc\023\uffcc\024\uffcc\025\uffcc\030" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\040\uffcc\042\uffcc" +
    "\043\uffcc\001\002\000\004\014\164\001\002\000\034\002" +
    "\uffcb\017\uffcb\023\uffcb\024\uffcb\025\uffcb\030\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\036\uffcb\040\uffcb\042\uffcb\043\uffcb\001" +
    "\002\000\034\002\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\030\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\001\002\000\004\014\140\001\002\000\004" +
    "\030\137\001\002\000\004\021\ufffa\001\002\000\004\014" +
    "\126\001\002\000\034\002\ufffd\017\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\030\ufffd\032\ufffd\033\ufffd\034\ufffd\036\ufffd\040" +
    "\ufffd\042\ufffd\043\ufffd\001\002\000\004\021\ufffb\001\002" +
    "\000\030\002\125\023\030\024\011\025\022\030\027\032" +
    "\024\033\005\034\023\036\010\042\013\043\031\001\002" +
    "\000\030\002\uffff\023\uffff\024\uffff\025\uffff\030\uffff\032" +
    "\uffff\033\uffff\034\uffff\036\uffff\042\uffff\043\uffff\001\002" +
    "\000\004\021\ufff9\001\002\000\004\021\ufff8\001\002\000" +
    "\004\030\123\001\002\000\004\014\115\001\002\000\004" +
    "\014\110\001\002\000\034\002\ufffc\017\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc\036\ufffc" +
    "\040\ufffc\042\ufffc\043\ufffc\001\002\000\004\021\107\001" +
    "\002\000\004\004\066\001\002\000\004\030\065\001\002" +
    "\000\004\014\042\001\002\000\036\002\uffe3\017\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\034\036\uffe3\040\uffe3\042\uffe3\043\uffe3\001\002\000" +
    "\034\002\uffe2\017\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\036\uffe2\040\uffe2\042\uffe2\043" +
    "\uffe2\001\002\000\004\016\035\001\002\000\026\023\030" +
    "\024\011\025\022\030\027\032\024\033\005\034\023\036" +
    "\010\042\013\043\031\001\002\000\030\017\041\023\030" +
    "\024\011\025\022\030\027\032\024\033\005\034\023\036" +
    "\010\042\013\043\031\001\002\000\032\017\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\036" +
    "\uffd6\040\uffd6\042\uffd6\043\uffd6\001\002\000\032\017\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\030\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\040\uffd5\042\uffd5\043\uffd5\001\002\000\034" +
    "\002\uffd4\017\uffd4\023\uffd4\024\uffd4\025\uffd4\030\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\036\uffd4\040\uffd4\042\uffd4\043\uffd4" +
    "\001\002\000\006\026\043\030\045\001\002\000\016\004" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\020\uffdd\001\002" +
    "\000\012\004\054\011\053\012\056\013\055\001\002\000" +
    "\016\004\uffde\011\uffde\012\uffde\013\uffde\015\uffde\020\uffde" +
    "\001\002\000\004\015\047\001\002\000\004\016\050\001" +
    "\002\000\026\023\030\024\011\025\022\030\027\032\024" +
    "\033\005\034\023\036\010\042\013\043\031\001\002\000" +
    "\030\017\052\023\030\024\011\025\022\030\027\032\024" +
    "\033\005\034\023\036\010\042\013\043\031\001\002\000" +
    "\034\002\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\036\uffc8\040\uffc8\042\uffc8\043" +
    "\uffc8\001\002\000\004\004\064\001\002\000\004\004\063" +
    "\001\002\000\010\004\062\026\uffda\030\uffda\001\002\000" +
    "\010\004\061\026\uffdb\030\uffdb\001\002\000\006\026\043" +
    "\030\045\001\002\000\004\015\uffdf\001\002\000\006\026" +
    "\uffd9\030\uffd9\001\002\000\006\026\uffd8\030\uffd8\001\002" +
    "\000\006\026\uffdc\030\uffdc\001\002\000\006\026\uffd7\030" +
    "\uffd7\001\002\000\004\021\ufff7\001\002\000\012\026\070" +
    "\027\072\030\071\031\074\001\002\000\004\021\ufff3\001" +
    "\002\000\014\005\075\006\076\007\101\010\077\021\ufff2" +
    "\001\002\000\012\005\075\006\076\007\101\010\077\001" +
    "\002\000\004\021\ufff1\001\002\000\004\021\ufff0\001\002" +
    "\000\004\021\ufff4\001\002\000\006\026\uffeb\030\uffeb\001" +
    "\002\000\006\026\uffea\030\uffea\001\002\000\006\026\uffe8" +
    "\030\uffe8\001\002\000\006\026\102\030\103\001\002\000" +
    "\006\026\uffe9\030\uffe9\001\002\000\004\021\uffec\001\002" +
    "\000\004\021\uffed\001\002\000\006\026\105\030\106\001" +
    "\002\000\004\021\uffef\001\002\000\004\021\uffee\001\002" +
    "\000\034\002\ufffe\017\ufffe\023\ufffe\024\ufffe\025\ufffe\030" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\036\ufffe\040\ufffe\042\ufffe" +
    "\043\ufffe\001\002\000\006\030\112\031\113\001\002\000" +
    "\004\015\114\001\002\000\004\015\uffe6\001\002\000\004" +
    "\015\uffe5\001\002\000\004\021\uffe7\001\002\000\006\026" +
    "\043\030\045\001\002\000\004\015\117\001\002\000\004" +
    "\016\120\001\002\000\026\023\030\024\011\025\022\030" +
    "\027\032\024\033\005\034\023\036\010\042\013\043\031" +
    "\001\002\000\030\017\122\023\030\024\011\025\022\030" +
    "\027\032\024\033\005\034\023\036\010\042\013\043\031" +
    "\001\002\000\036\002\uffe0\017\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\040\uffe0\042\uffe0\043\uffe0\001\002\000\004\021\ufff5\001" +
    "\002\000\030\002\001\023\001\024\001\025\001\030\001" +
    "\032\001\033\001\034\001\036\001\042\001\043\001\001" +
    "\002\000\004\002\000\001\002\000\006\026\043\030\045" +
    "\001\002\000\004\020\135\001\002\000\004\015\131\001" +
    "\002\000\004\016\132\001\002\000\026\023\030\024\011" +
    "\025\022\030\027\032\024\033\005\034\023\036\010\042" +
    "\013\043\031\001\002\000\030\017\134\023\030\024\011" +
    "\025\022\030\027\032\024\033\005\034\023\036\010\042" +
    "\013\043\031\001\002\000\034\002\uffca\017\uffca\023\uffca" +
    "\024\uffca\025\uffca\030\uffca\032\uffca\033\uffca\034\uffca\036" +
    "\uffca\040\uffca\042\uffca\043\uffca\001\002\000\006\026\043" +
    "\030\045\001\002\000\004\015\uffc9\001\002\000\004\021" +
    "\ufff6\001\002\000\004\030\141\001\002\000\004\015\142" +
    "\001\002\000\004\016\143\001\002\000\004\037\146\001" +
    "\002\000\006\037\146\041\157\001\002\000\006\037\uffd1" +
    "\041\uffd1\001\002\000\006\026\147\031\151\001\002\000" +
    "\004\022\uffcf\001\002\000\004\022\152\001\002\000\004" +
    "\022\uffce\001\002\000\026\023\030\024\011\025\022\030" +
    "\027\032\024\033\005\034\023\036\010\042\013\043\031" +
    "\001\002\000\030\023\030\024\011\025\022\030\027\032" +
    "\024\033\005\034\023\036\010\040\154\042\013\043\031" +
    "\001\002\000\006\037\uffd0\041\uffd0\001\002\000\006\037" +
    "\uffd2\041\uffd2\001\002\000\004\017\163\001\002\000\004" +
    "\022\160\001\002\000\026\023\030\024\011\025\022\030" +
    "\027\032\024\033\005\034\023\036\010\042\013\043\031" +
    "\001\002\000\030\023\030\024\011\025\022\030\027\032" +
    "\024\033\005\034\023\036\010\040\162\042\013\043\031" +
    "\001\002\000\004\017\uffcd\001\002\000\034\002\uffd3\017" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\030\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\036\uffd3\040\uffd3\042\uffd3\043\uffd3\001\002\000" +
    "\004\030\165\001\002\000\004\015\166\001\002\000\004" +
    "\021\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\034\002\015\003\025\004\016\005\014\006" +
    "\011\012\017\014\020\015\013\016\031\023\006\027\005" +
    "\030\024\031\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\025\004\123" +
    "\005\014\006\011\012\017\014\020\015\013\016\031\023" +
    "\006\027\005\030\024\031\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\025\004\036\005\014\006\011\012" +
    "\017\014\020\015\013\016\031\023\006\027\005\030\024" +
    "\031\003\034\035\001\001\000\032\003\025\004\037\005" +
    "\014\006\011\012\017\014\020\015\013\016\031\023\006" +
    "\027\005\030\024\031\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\045\020\043" +
    "\001\001\000\002\001\001\000\004\021\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\025\004\036\005\014\006\011\012\017\014\020\015" +
    "\013\016\031\023\006\027\005\030\024\031\003\034\050" +
    "\001\001\000\032\003\025\004\037\005\014\006\011\012" +
    "\017\014\020\015\013\016\031\023\006\027\005\030\024" +
    "\031\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\066\010\072\001\001\000\002\001" +
    "\001\000\004\011\103\001\001\000\004\011\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\115\020\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\025\004\036\005\014\006\011" +
    "\012\017\014\020\015\013\016\031\023\006\027\005\030" +
    "\024\031\003\034\120\001\001\000\032\003\025\004\037" +
    "\005\014\006\011\012\017\014\020\015\013\016\031\023" +
    "\006\027\005\030\024\031\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\126\032\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\025\004\036\005" +
    "\014\006\011\012\017\014\020\015\013\016\031\023\006" +
    "\027\005\030\024\031\003\034\132\001\001\000\032\003" +
    "\025\004\037\005\014\006\011\012\017\014\020\015\013" +
    "\016\031\023\006\027\005\030\024\031\003\001\001\000" +
    "\002\001\001\000\004\020\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\144\033\143\001\001\000\006" +
    "\025\154\026\155\001\001\000\002\001\001\000\004\024" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\025\004\036\005\014\006\011\012" +
    "\017\014\020\015\013\016\031\023\006\027\005\030\024" +
    "\031\003\034\152\001\001\000\032\003\025\004\037\005" +
    "\014\006\011\012\017\014\020\015\013\016\031\023\006" +
    "\027\005\030\024\031\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\025\004\036\005\014\006\011\012\017\014\020\015" +
    "\013\016\031\023\006\027\005\030\024\031\003\034\160" +
    "\001\001\000\032\003\025\004\037\005\014\006\011\012" +
    "\017\014\020\015\013\016\031\023\006\027\005\030\024" +
    "\031\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Heap que almacena variables
    private ArrayList<Variable> arrVariables;
    //private javax.swing.JTextArea textArea;


    public parser(Lexer lex, javax.swing.JTextArea text){ //Debo cambiar TextArea por clase Codigo? Yo consideor que no
        super(lex);
        this.arrVariables = new ArrayList<>();
    }
     
     /*  */
        String texto = ""; //Texto que iremos acumulando para pasar a Java

        //Getter de txt
        public String getText() {
                return texto;
        }

        //Metodo que recorre el arreglo de casos de un Switch
        public String recorrerArrCasos(ArrayList<String> casos){
                String txt = "";
                for(String s : casos){
                        txt += s + "\n";
                }
                return txt;
        }

        //Metodo que recorre el arreglo de casos de un Switch
        public String recorrerArrInstrucciones(ArrayList<String> instrucciones){
                String txt = "";
                for(String s : instrucciones){
                        txt += s + "\n";
                }
                return txt;
        }

        //Metodo para guardar variable al declararla
        public void guardarVariable(String dataType, String nameVar){
                arrVariables.add(new Variable(dataType,nameVar));
        }

        //Metodo para identificar tipo primitivo de la variable
        public String obtenerTipoVariable(String nameVar) {
                String resultado = "";
                Variable var = buscarVariable(nameVar);

                if (var != null) {
                        switch (var.getTipo()) {
                                case "int":
                                        return "int";
                                case "float":
                                        return "float";
                                case "String":
                                        return "String";
                        }
                } else {
                        System.out.println(var.getNombre() + " no fue encontrado como Variable.");
        }
        return resultado;
    }

        //Metodo para encontrar una variable declarada previamente
        public Variable buscarVariable(String nameVar){
                for(Variable var : arrVariables){
                        if(var.getNombre().equals(nameVar)){
                                return var;
                        }
                }
                return null;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= inicio ejecucion 
            {
              Object RESULT =null;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += exec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= ejecucion 
            {
              Object RESULT =null;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 texto += exec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ejecucion ::= principales PUNTO_COMA 
            {
              Object RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = init.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ejecucion ::= condicionales 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cond.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ejecucion ::= ciclos 
            {
              Object RESULT =null;
		int cycleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cycleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cycle = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cycle.toString() + "\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // principales ::= declaracion 
            {
              Object RESULT =null;
		int declareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declare = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = declare.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // principales ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = asign.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // principales ::= escritura 
            {
              Object RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = write.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // principales ::= lectura 
            {
              Object RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int readright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = read.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= ENTERO NomVariable 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("int",nameVar.toString()); RESULT = "int " + nameVar.toString() +";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= FLOTANTE NomVariable 
            {
              Object RESULT =null;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("float",nameVar.toString()); RESULT = "float " + nameVar.toString()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= TEXTO NomVariable 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable("String",nameVar.toString()); RESULT = "String " + nameVar.toString()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacion ::= NomVariable IGUAL Cadena 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar + " = " + text + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= NomVariable IGUAL numero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar + " = " + num + ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numero ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numero ::= NumDecimal 
            {
              Object RESULT =null;
		int numDecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numDec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numDec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numero ::= operacion 
            {
              Object RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operation.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= NumEntero operando NumEntero 
            {
              Object RESULT =null;
		int numInt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numInt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numInt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numInt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt1.toString() + op.toString() + numInt2.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= NumEntero operando NomVariable 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString() + op.toString() + nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= NomVariable operando NomVariable 
            {
              Object RESULT =null;
		int nameVar1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVar1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVar2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVar2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar1.toString() + op.toString() + nameVar2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacion ::= NomVariable operando NumEntero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString() + op.toString() + numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operando ::= MAS 
            {
              Object RESULT =null;
		 RESULT =  "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operando ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operando ::= POR 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operando ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // escritura ::= ESCRIBIR PAR_A mensaje PAR_C 
            {
              Object RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object message = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "System.out.println(String.valueOf("+ message.toString() +"));"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mensaje ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mensaje ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lectura ::= LEER PAR_A NomVariable PAR_C 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String result = obtenerTipoVariable(nameVar.toString());
                        if(result.equals("int")){
                                RESULT = nameVar.toString() + " = " + "Integer.parseInt(JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\"));";
                        } else if(result.equals("float")){
                                RESULT = nameVar.toString() + " = " + "Float.parseFloat(JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\"));";
                        } else if(result.equals("String")){
                                RESULT = nameVar.toString() + " = " + "JOptionPane.showInputDialog(null, \"Ingrese el nuevo valor para " + nameVar.toString() + ":\");";
                        }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicionales ::= si 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iff.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicionales ::= si sino 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elsee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iff.toString() + elsee.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicionales ::= conmutador 
            {
              Object RESULT =null;
		int switchhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int switchhright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object switchh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = switchh.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // si ::= SI PAR_A condicion PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if(" + condi.toString() + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= valor comparador valor 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val1.toString() + comp.toString() + val2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= IGUAL IGUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= MAYOR IGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparador ::= MENOR IGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparador ::= DIF IGUAL 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruc ::= ejecucion 
            {
              ArrayList<String> RESULT =null;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(exec.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruc ::= instruc ejecucion 
            {
              ArrayList<String> RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int execleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 instr.add(exec.toString()); RESULT = instr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruc",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sino ::= SINO LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  "else{" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conmutador ::= EN_CASO_DE PAR_A NomVariable PAR_C LLAVE_A casos predeterminado LLAVE_C 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> cases = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "switch(" + nameVar + "){" + recorrerArrCasos(cases) + def.toString() + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conmutador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // casos ::= casos caso 
            {
              ArrayList<String> RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> cases = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cases.add(casee.toString()); RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // casos ::= caso 
            {
              ArrayList<String> RESULT =null;
		int caseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(casee.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // caso ::= CASO numerocadena DOS_PUNTOS instruc FIN_CASO 
            {
              Object RESULT =null;
		int numchainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numchainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object numchain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "case " + numchain.toString() + ":\n" + recorrerArrInstrucciones(instr) + "\nbreak;"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // numerocadena ::= NumEntero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = num.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerocadena",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // numerocadena ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerocadena",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // predeterminado ::= DEPLANO DOS_PUNTOS instruc FIN_CASO 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "default:" + recorrerArrInstrucciones(instr) + "break;"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predeterminado",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ciclos ::= para 
            {
              Object RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = forr.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ciclos ::= mientras 
            {
              Object RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whilee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = whilee.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // para ::= PARA PAR_A param PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for(" + par + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // param ::= valor COMA valor 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "int i=" + val1 + "; i<" + val2 + "; i++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mientras ::= MIENTRAS PAR_A condicion PAR_C LLAVE_A instruc LLAVE_C 
            {
              Object RESULT =null;
		int condileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object condi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> instr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "while(" + condi.toString() + "){" + recorrerArrInstrucciones(instr) + "}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
