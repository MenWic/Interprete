package menwic.interprete.GUI;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;

import static java.lang.System.exit;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.JTextArea;

import menwic.interprete.analizadores.a_lexico.Lexer;
import menwic.interprete.analizadores.a_sintactico.parser;

/**
 *
 * @author lamr4
 */
public class JFramePrincipal extends javax.swing.JFrame {

    //Constante para nombre de la Clase que generaremos
    private final String NAME_CLASS = "Codigo";
    private final String COMPILE = "javac";
    private final String EXECUTE = "java";
    //private final String DELETE = "del"; //Windows

    /**
     * Creates new form JFramePrincipal
     */
    public JFramePrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonCompilar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSalida = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaEntrada = new javax.swing.JTextArea();
        jButtonBorrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonSalir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonEjecutar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interprete");
        setBackground(new java.awt.Color(212, 172, 110));

        jPanel1.setBackground(new java.awt.Color(102, 117, 127));
        jPanel1.setForeground(new java.awt.Color(212, 172, 110));

        jButtonCompilar.setText("Compilar");
        jButtonCompilar.setToolTipText("Ejecutar");
        jButtonCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompilarActionPerformed(evt);
            }
        });

        jTextAreaSalida.setBackground(new java.awt.Color(204, 214, 221));
        jTextAreaSalida.setColumns(20);
        jTextAreaSalida.setForeground(new java.awt.Color(41, 47, 51));
        jTextAreaSalida.setRows(5);
        jScrollPane1.setViewportView(jTextAreaSalida);

        jTextAreaEntrada.setBackground(new java.awt.Color(204, 214, 221));
        jTextAreaEntrada.setColumns(20);
        jTextAreaEntrada.setForeground(new java.awt.Color(41, 47, 51));
        jTextAreaEntrada.setRows(5);
        jScrollPane2.setViewportView(jTextAreaEntrada);

        jButtonBorrar.setText("Clean");
        jButtonBorrar.setToolTipText("Limpiar");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel1.setText("Output:");

        jLabel2.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel2.setText("Input:");

        jButtonSalir.setText("Exit");
        jButtonSalir.setToolTipText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Leelawadee", 1, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Mini Compiler");

        jButtonEjecutar.setText("Ejecutar");
        jButtonEjecutar.setToolTipText("Ejecutar");
        jButtonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEjecutarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(149, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButtonEjecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButtonCompilar, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))))
                                .addGap(67, 67, 67))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBorrar)
                                .addGap(78, 78, 78))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(181, 181, 181))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(486, 486, 486))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(568, 568, 568)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jButtonCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButtonEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jButtonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompilarActionPerformed
        String mensaje;

        //Flujo principal de Compilacion
        try {
            //Instancia de Analizador Lexico
            Lexer lexer = new Lexer(new StringReader(jTextAreaEntrada.getText())); //Brindamos la cadena de texto del jTextArea
            //Instancia de Analizador Sintactico
            parser parser = new parser(lexer, jTextAreaSalida);  //Brindamos texto a analizar y area para outputs

            //Cadena de texto que poseera el paquete e importaciones de la clase que se generara
            String code = "";
            //code += "package menwic.interprete.analizadores.a_sintactico;\n";
            code += "import java.util.ArrayList;\n";
            code += "import javax.swing.JOptionPane;\n\n";
            code += "public class Codigo {\n";
            code += "\tpublic static void main(String[] args){\n"; //code += "\tpublic static void MainCodigo(javax.swing.JTextArea jTextAreaSalida){\n";

            jTextAreaSalida.setText(""); //Limpiamos Area de Salida

            /* PRIMERO REALIZAMOS ANALIZIS SINTACTICO */
            parser.parse(); //Si hay errores lexicos, el try muere aqui... y pasa al catch
            code += parser.getText(); //Insertar texto/body de la clase Codigo.java
            code += "\t}\n}\n";
            System.out.print(code); //Muestra String de Codigo.java, en Consola

            /* SEGUNDO CREA ARCHIVO JAVA */
            this.crearArchivo(code);
            /* TERCERO COMPILA EL ARCHIVO JAVA*/
            this.compilarArchivo();
            /* CUARTO EJECUTA ARCHIVO COMPILADO */
            //this.ejecutarArchivo();
        } catch (Exception e) {
            mensaje = "Error!!! En flujo principal \"Compilacion\": ";
            System.out.print(mensaje); //mostramos en consola
            System.out.print(e.getMessage());
            /* DEVOLVER LEXEMA DE TOKEN QUE DIO ERROR, Y LINEA Y COLUMNA, NO: e.getMessage() */
            JOptionPane.showMessageDialog(this, mensaje + e.getMessage());
        }
    }//GEN-LAST:event_jButtonCompilarActionPerformed

    //Metodo que ejecuta procesos indicando en String el comando e instruccion
    public Process ejecutarProceso(String comando, String instr) {
        String mensaje;
        mensaje = ">" + comando + " " + instr;
        jTextAreaSalida.append(mensaje + "\n");

        try {
            //Comando completo a ejecutar
            String[] comandos = {comando, instr};
            //Constructor de proceso
            ProcessBuilder pb = new ProcessBuilder(comandos);
            //Redurigur errores de la salida/terminal del proceso
            pb.redirectErrorStream(true);
            //Inicio del proceso
            Process proceso = pb.start();
            System.out.println(mensaje + ": pass");
            return proceso;
        } catch (IOException e) {
            System.out.println(mensaje + ": fail");
            return null;
        }
    }

    //Metodo para eliminar archivos
    /*
    private void eliminarArchivo() {
        //Eliminamos los posibles archivos viejos que existan
        try {
            Process elimJava = ejecutarProceso(DELETE, NAME_CLASS + ".java");
            Process elimClass = ejecutarProceso(DELETE, NAME_CLASS + ".class");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No existe algun archivo inicial .java o .clsss... Continue.");
        }
    }
     */
    //Metodo que crea un Archivo Java e incrusta el String code a su body
    private void crearArchivo(String code) {
        String mensaje;

        //Intentamos crear el nuevo Archivo .java
        try {
            File file = new File(NAME_CLASS + ".java");
            //if (file.exists()) {
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(code); //Escribe el codigo almacenado en la Clase
            bw.close();

            mensaje = "Archivo " + NAME_CLASS + ".java creado exitosamente!";
            System.out.println(mensaje); //mostramos en consola
            JOptionPane.showMessageDialog(this, mensaje);
        } catch (IOException ex) {
            mensaje = "Error! No se pudo crear el archivo " + NAME_CLASS + ".java";
            System.out.println(mensaje); //mostramos en consola
            JOptionPane.showMessageDialog(this, mensaje);
            Logger.getLogger(JFramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Metodo que ejecuta el comando javac para compilar la clase creada con el code incrustado
    private void compilarArchivo() {
        String mensaje;

        //Intentamos compilar el archivo creado (si tiene errores lex el archivo, lanzara error antes de llegar aca)
        try {
            //Comando para compilar clase java
            Process compilacion = ejecutarProceso(COMPILE, NAME_CLASS + ".java");
            int result = compilacion.waitFor();

            if (result == 0) { //si ya no espera nada el proceso, todo bien
                mensaje = "Archivo " + NAME_CLASS + ".java compilado exitosamente";
                System.out.println(">status: " + mensaje); //mostramos en consola
                jTextAreaSalida.append(">status: " + mensaje + "\n");
                JOptionPane.showMessageDialog(this, mensaje);
                //this.ejecutarArchivo();
            } else { //si espera algo aun, algo salio mal en compilacion
                mensaje = "Error! No se pudo compilar el archivo " + NAME_CLASS + ".java";
                System.out.println(">status: " + mensaje); //mostramos en consola
                jTextAreaSalida.append(">status: " + mensaje + "\n");
                JOptionPane.showMessageDialog(this, mensaje);

                // Leer la salida de error del proceso de compilación
                BufferedReader br = new BufferedReader(new InputStreamReader(compilacion.getErrorStream()));
                String linea;

                while ((linea = br.readLine()) != null) { //mientras no llegue al final de linea
                    int initIndex = linea.indexOf("error:");
                    String error = linea.substring(initIndex);
                    jTextAreaSalida.append("Error semantico: " + error + "\n");
                }
                br.close();
            }
        } catch (IOException | InterruptedException e) {
            mensaje = "Error!!! Hubo un error en el flujo de \"Compilacion\"";
            System.out.println(mensaje);
            JOptionPane.showMessageDialog(this, mensaje + ": " + e.getMessage());
        }
    }

    //Metodo que ejecuta el archivo compilado .class
    private void ejecutarArchivo() throws IOException {
        String mensaje;

        try {
            jTextAreaSalida.setText(""); //Limpiar jTextAreaSalida
            //Inicia formalmente proceso de ejecucion de la clase
            Process ejecucion = ejecutarProceso(EXECUTE, NAME_CLASS); //Sin el ".class"
            
            mensaje = "Archivo " + NAME_CLASS + ".class ejecutando exitosamente";
            System.out.println(">status: " + mensaje); //mostramos en consola
            jTextAreaSalida.append(">status: " + mensaje + "\n\n");
            JOptionPane.showMessageDialog(this, mensaje);

            int result = ejecucion.waitFor();

            //Leer las lineas del proceso de ejecucion
            BufferedReader br = new BufferedReader(new InputStreamReader(ejecucion.getInputStream()));
            String linea;

            while ((linea = br.readLine()) != null) { //leer linea por linea
                jTextAreaSalida.append(linea + "\n"); //Vamos agregando lineas leidas al jTextAreaSalida
            }
            int resultado = ejecucion.waitFor();
            System.out.println("Ejecucion finalizada!");
            JOptionPane.showMessageDialog(this, "Ejecucion finalizada!");

        } catch (InterruptedException ex) {
            JOptionPane.showMessageDialog(this, "Error! Hubo un error en el flujo de \"Ejecucion\" " + ex.getMessage());
            Logger.getLogger(JFramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed

        jTextAreaSalida.setText("");
    }//GEN-LAST:event_jButtonBorrarActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        exit(-1);
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEjecutarActionPerformed
        //SACAR DEL TRY-CATCH AL METODO: ejecutarArchivo();
        try {
            /* CUARTO EJECUTA ARCHIVO COMPILADO */
            this.ejecutarArchivo();
        } catch (IOException ex) {
            Logger.getLogger(JFramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonEjecutarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFramePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonCompilar;
    private javax.swing.JButton jButtonEjecutar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaEntrada;
    private javax.swing.JTextArea jTextAreaSalida;
    // End of variables declaration//GEN-END:variables
}
