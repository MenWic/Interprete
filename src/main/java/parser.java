
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------



import menwic.interprete.analizadores.a_lexico.Lexer;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\003" +
    "\000\002\002\003\000\002\003\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\002\000\002" +
    "\005\005\000\002\005\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\007\000\002\012\003\000\002\012\003\000\002\013" +
    "\010\000\002\014\003\000\002\015\011\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\020\003\000\002\021" +
    "\004\000\002\022\003\000\002\023\007\000\002\024\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\024\022\ufff6\026\023\027\006\030\021\033" +
    "\022\035\020\036\005\037\017\041\007\001\002\000\004" +
    "\002\uffd7\001\002\000\004\016\122\001\002\000\004\033" +
    "\ufff8\001\002\000\004\016\111\001\002\000\004\033\110" +
    "\001\002\000\004\022\107\001\002\000\004\022\106\001" +
    "\002\000\004\002\105\001\002\000\004\002\ufffb\001\002" +
    "\000\004\022\104\001\002\000\004\022\103\001\002\000" +
    "\004\016\055\001\002\000\004\016\047\001\002\000\004" +
    "\033\ufff7\001\002\000\004\005\026\001\002\000\004\033" +
    "\ufff9\001\002\000\004\002\ufffc\001\002\000\004\002\uffe4" +
    "\001\002\000\012\031\027\032\032\033\031\034\034\001" +
    "\002\000\014\006\035\007\036\010\041\011\040\022\ufff3" +
    "\001\002\000\004\022\ufff4\001\002\000\012\006\035\007" +
    "\036\010\041\011\040\001\002\000\004\022\ufff2\001\002" +
    "\000\004\022\ufff1\001\002\000\004\022\ufff5\001\002\000" +
    "\006\031\uffec\033\uffec\001\002\000\006\031\uffeb\033\uffeb" +
    "\001\002\000\006\031\042\033\043\001\002\000\006\031" +
    "\uffe9\033\uffe9\001\002\000\006\031\uffea\033\uffea\001\002" +
    "\000\004\022\uffed\001\002\000\004\022\uffee\001\002\000" +
    "\006\031\045\033\046\001\002\000\004\022\ufff0\001\002" +
    "\000\004\022\uffef\001\002\000\006\033\050\034\052\001" +
    "\002\000\004\017\uffe7\001\002\000\004\017\053\001\002" +
    "\000\004\017\uffe6\001\002\000\004\022\054\001\002\000" +
    "\004\022\uffe8\001\002\000\004\020\056\001\002\000\006" +
    "\031\057\033\060\001\002\000\012\005\067\012\066\013" +
    "\071\014\070\001\002\000\012\005\067\012\066\013\071" +
    "\014\070\001\002\000\004\020\062\001\002\000\004\017" +
    "\063\001\002\000\024\022\ufff6\026\023\027\006\030\021" +
    "\033\022\035\020\036\005\037\017\041\007\001\002\000" +
    "\004\002\uffd9\001\002\000\004\002\uffe3\001\002\000\004" +
    "\005\100\001\002\000\004\005\077\001\002\000\010\005" +
    "\076\031\uffdd\033\uffdd\001\002\000\010\005\075\031\uffde" +
    "\033\uffde\001\002\000\006\031\073\033\074\001\002\000" +
    "\004\020\uffe1\001\002\000\004\020\uffe2\001\002\000\006" +
    "\031\uffdc\033\uffdc\001\002\000\006\031\uffdb\033\uffdb\001" +
    "\002\000\006\031\uffdf\033\uffdf\001\002\000\006\031\uffda" +
    "\033\uffda\001\002\000\004\031\102\001\002\000\004\020" +
    "\uffe0\001\002\000\004\002\ufffd\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002\000\004\022\ufffa\001\002" +
    "\000\004\016\112\001\002\000\004\031\116\001\002\000" +
    "\004\017\114\001\002\000\024\022\ufff6\026\023\027\006" +
    "\030\021\033\022\035\020\036\005\037\017\041\007\001" +
    "\002\000\004\002\uffd6\001\002\000\004\021\117\001\002" +
    "\000\004\031\120\001\002\000\004\017\121\001\002\000" +
    "\004\017\uffd5\001\002\000\004\020\123\001\002\000\004" +
    "\033\124\001\002\000\004\020\125\001\002\000\004\017" +
    "\126\001\002\000\004\022\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\026\002\012\003\011\004\007\005\010\011" +
    "\014\013\015\014\013\015\024\022\023\023\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\027\007\032" +
    "\001\001\000\004\010\043\001\001\000\002\001\001\000" +
    "\004\010\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\060" +
    "\001\001\000\004\017\100\001\001\000\004\017\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\063" +
    "\003\011\004\007\005\010\011\014\013\015\014\013\015" +
    "\024\020\064\022\023\023\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\063\003\011\004\007\005\010" +
    "\011\014\013\015\014\013\015\024\020\114\022\023\023" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Heap que almacena variables
    private ArrayList<Variable> arrVariables = new ArrayList<>();
    private javax.swing.JTextArea textArea;

    public parser(Lexer lex, javax.swing.JTextArea text){
        super(lex);

        textArea = text;
    }
     
     /*DECLARAR VARIABLE*/
    //Metodo para guardar variable en Java
    public void guardarVariable(String dataType, String nameVar){
        arrVariables.add(new Variable(dataType, nameVar));
    }

    /*ASIGNAR VARIABLE*/
    //Metodo principal para settear atributos de una variable pre-creada
    public void asignarVariable(String nameVar, String chain){
        Variable varTemp = buscarVariable(nameVar); 

        if(varTemp != null){ //si la variable retornada no es nula, se encontro
            varTemp.setValor(chain);
            JOptionPane.showMessageDialog(null,varTemp.getValor() + " asignado a variable " + varTemp.getNombre());
        } else{
            JOptionPane.showMessageDialog(null,"No se encontro la variable " + nameVar);
        }
    }

    //Metodo Secundario de Asignar que busca una variable por nombre
    public Variable buscarVariable(String nameVar){
        //recorrer variables almacenadas
        for(Variable variable: arrVariables){
            if(variable.getNombre().equals(nameVar)){
            return variable;
            }
        }
        return null;
    }

    //Metodo Ternario que realiza operacion matematica para obtener resultado que sera vlor de una variable
    public int operacion(String val1, String operando, String val2){
        //Valores recibidos ya parseados
        int num1 = 0;
        int num2 = 0;
        int resultado = 0;

        switch (operando) {
        case "+":
            //Val1
            num1 = convertirAEntero(val1);
            //Val2
            num2 = convertirAEntero(val2);
            return resultado = num1 + num2;

        case "-":
            //Val1
            num1 = convertirAEntero(val1);
            //Val2
            num2 = convertirAEntero(val2);
            return resultado = num1 - num2;

        case "*":
            //Val1
            num1 = convertirAEntero(val1);
            //Val2
            num2 = convertirAEntero(val2);
            return resultado = num1 * num2;

        case "/":
            //Val2 (no puede dividirse entre 0)
            num2 = convertirAEntero(val2);

            if(num2 != 0){
                //Val1
                num1 = convertirAEntero(val1);
                return resultado = num1 / num2;
            } else{
                JOptionPane.showMessageDialog(null, "Error: "+num1+" no puede dividirse entre "+num2+"!");
                return resultado;
            }
    
        default:
            JOptionPane.showMessageDialog(null,"Error: El simbolo de operacion no fue ningun caso aceptado, revise");
            return resultado;
        }
    }

//Metodo para pasar a entero
    public int convertirAEntero(String val) {
        int numTemp = 0;

        //1 solo Val
        if (esNumero(val)){ //si es numero entero
                numTemp = Integer.valueOf(val);
                return numTemp;
        } else{ //como no fue num int, sera variable
            String valorTemp = buscarVariable(val).getValor();
            
            if(esNumero(valorTemp)){ //si la variable es num int
                numTemp = Integer.valueOf(valorTemp);
                return numTemp;
            }
        }
        return numTemp;
    }

    //Metodo para verificar si un valor es de tipo entero
    private boolean esNumero(String val){
        try {
            Double.parseDouble(val);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /*ESCRITURA*/
    //metodo principal que escribe lo que esta entre parentesis (verifica si es texto o si es variable)
     public void escribir(String data){
        //Verificar si trae comillas, si si, se imprime, si no, se busca var y valor e imprimir valor
        if(data.contains("\"")){
            System.out.println(data.replaceAll("\"", "")); //RECORDAR PASAR AL TEXT AREA, NO A TERMINAL
        } else{ //como no es texto, buscamos variable.valor e imprimimos
            Variable varTemp = buscarVariable(data);

            if(varTemp != null){ //si la variable retornada no es nula, se encontro
                System.out.println(varTemp.getValor());
            } else{
                JOptionPane.showMessageDialog(null,"No se encontro la variable " + data);
            }
        }
    }

    /*LECTURA*/
    public void lectura(String nameVar){
        String userInput = JOptionPane.showInputDialog(null, "Ingrese su dato: ");
        Variable varTemp = buscarVariable(nameVar);
        //asignarVariable(varTemp.getNombre(), varTemp.setValor(userInput));
        //IMPRESIONNNN
        //AQUI ME QUEDEEEEE, pendiente ver si al leer
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ejecucion ::= declaracion PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ejecucion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ejecucion ::= asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ejecucion ::= escritura PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ejecucion ::= lectura PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ejecucion ::= ciclo 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ejecucion ::= condicional 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= tipo_dato NomVariable 
            {
              Object RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dataType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 guardarVariable(dataType.toString(), nameVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_dato ::= ENTERO 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_dato ::= FLOTANTE 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_dato ::= TEXTO 
            {
              Object RESULT =null;
		 RESULT = "String"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asignacion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= NomVariable IGUAL Cadena 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int chainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object chain = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 asignarVariable(nameVar.toString(), chain.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacion ::= NomVariable IGUAL num 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 asignarVariable(nameVar.toString(), value.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // num ::= NumEntero 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numInt.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // num ::= NumDecimal 
            {
              Object RESULT =null;
		int numDecimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numDecimal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = numDecimal.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // num ::= operacion 
            {
              Object RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operation.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion ::= NumEntero operando NumEntero 
            {
              Object RESULT =null;
		int numInt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numInt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numInt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numInt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operacion(numInt1.toString(), op.toString(), NumInt2.toString());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= NumEntero operando NomVariable 
            {
              Object RESULT =null;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operacion(numInt.toString(), op.toString(), nameVar.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= NomVariable operando NomVariable 
            {
              Object RESULT =null;
		int nameVar1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVar1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameVar2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVar2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operacion(nameVar1.toString(), op.toString(), nameVar2.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= NomVariable operando NumEntero 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = operacion(nameVar.toString(), op.toString(), numInt.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operando ::= MAS 
            {
              Object RESULT =null;
		 RESULT =  "+" 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operando ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = "-" 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operando ::= POR 
            {
              Object RESULT =null;
		 RESULT = "*" 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operando ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/" 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // escritura ::= ESCRIBIR PAR_A escribir PAR_C PUNTO_COMA 
            {
              Object RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = escribir(write); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // escribir ::= NomVariable 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nameVar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribir",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // escribir ::= Cadena 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = text; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribir",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lectura ::= LEER PAR_A COMILLA NomVariable COMILLA PAR_C 
            {
              Object RESULT =null;
		int nameVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nameVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = lectura(nameVar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicional ::= si 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // si ::= SI PAR_A COMILLA condicion COMILLA PAR_C instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= NomVariable comparador NomVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= NomVariable comparador NumEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= NumEntero comparador NumEntero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparador ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= MAYOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= MENOR IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= DIF IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr ::= ejecucion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sino ::= SINO instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ciclo ::= para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // para ::= PARA PAR_A param PAR_C instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // param ::= PAR_A NumEntero COMA NumEntero PAR_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
