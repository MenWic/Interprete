/* The following code was generated by JFlex 1.6.1 */

package menwic.interprete.analizadores.a_lexico;

/*Codigo de importacion*/
import menwic.interprete.analizadores.a_lexico.Token; //V

//cup //Tronar %type token

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\10\1\7\1\3\1\11\1\6\23\3\1\3\1\5\5\3"+
    "\1\2\1\2\1\3\1\3\1\2\1\3\1\13\1\3\12\12\1\3"+
    "\1\2\1\3\1\2\1\3\2\3\4\1\1\1\1\1\5\1\1\1"+
    "\3\1\1\1\2\1\1\1\1\1\6\1\4\3\1\4\1\3\1\1"+
    "\1\1\1\1\1\1\1\1\3\1\1\1\2\1\1\1\1\1\1\1"+
    "\1\1\2\1\1\1\1\1\1\1\3\1\1\1\2\1\57\3\1\1"+
    "\12\3\1\1\4\3\1\1\5\3\27\1\1\3\37\1\1\3\u01ca\1"+
    "\4\3\14\1\16\3\5\1\7\3\1\1\1\3\1\1\21\3\160\0"+
    "\5\1\1\3\2\1\2\3\4\1\1\3\1\1\6\3\1\1\1\3"+
    "\3\1\1\3\1\1\1\3\24\1\1\3\123\1\1\3\213\1\1\3"+
    "\7\0\246\1\1\3\46\1\2\3\1\1\7\3\47\1\11\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0\10\3\33\1"+
    "\5\3\3\1\35\3\13\0\5\3\53\1\25\0\12\12\4\3\2\1"+
    "\1\0\143\1\1\3\1\1\7\0\2\3\6\0\2\1\2\0\1\3"+
    "\4\0\2\1\12\12\3\1\2\3\1\1\20\3\1\1\1\0\36\1"+
    "\33\0\2\3\131\1\13\0\1\1\16\3\12\12\41\1\11\0\2\1"+
    "\4\3\1\1\5\3\26\1\4\0\1\1\11\0\1\1\3\0\1\1"+
    "\5\0\22\3\31\1\3\0\104\3\23\1\61\3\40\0\66\1\3\0"+
    "\1\1\22\0\1\1\7\0\12\1\2\0\2\3\12\12\1\3\20\1"+
    "\3\0\1\3\10\1\2\3\2\1\2\3\26\1\1\3\7\1\1\3"+
    "\1\1\3\3\4\1\2\3\1\0\1\1\7\0\2\3\2\0\2\3"+
    "\3\0\1\1\10\3\1\0\4\3\2\1\1\3\3\1\2\0\2\3"+
    "\12\12\2\1\17\3\3\0\1\3\6\1\4\3\2\1\2\3\26\1"+
    "\1\3\7\1\1\3\2\1\1\3\2\1\1\3\2\1\2\3\1\0"+
    "\1\3\5\0\4\3\2\0\2\3\3\0\3\3\1\0\7\3\4\1"+
    "\1\3\1\1\7\3\12\12\2\0\3\1\1\0\13\3\3\0\1\3"+
    "\11\1\1\3\3\1\1\3\26\1\1\3\7\1\1\3\2\1\1\3"+
    "\5\1\2\3\1\0\1\1\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\1\17\3\2\1\2\0\2\3\12\12\21\3\3\0\1\3\10\1"+
    "\2\3\2\1\2\3\26\1\1\3\7\1\1\3\2\1\1\3\5\1"+
    "\2\3\1\0\1\1\7\0\2\3\2\0\2\3\3\0\10\3\2\0"+
    "\4\3\2\1\1\3\3\1\2\0\2\3\12\12\1\3\1\1\20\3"+
    "\1\0\1\1\1\3\6\1\3\3\3\1\1\3\4\1\3\3\2\1"+
    "\1\3\1\1\1\3\2\1\3\3\2\1\3\3\3\1\3\3\14\1"+
    "\4\3\5\0\3\3\3\0\1\3\4\0\2\3\1\1\6\3\1\0"+
    "\16\3\12\12\20\3\4\0\1\3\10\1\1\3\3\1\1\3\27\1"+
    "\1\3\20\1\3\3\1\1\7\0\1\3\3\0\1\3\4\0\7\3"+
    "\2\0\1\3\2\1\6\3\2\1\2\0\2\3\12\12\21\3\3\0"+
    "\1\3\10\1\1\3\3\1\1\3\27\1\1\3\12\1\1\3\5\1"+
    "\2\3\1\0\1\1\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\7\3\1\1\1\3\2\1\2\0\2\3\12\12\1\3\2\1\16\3"+
    "\3\0\1\3\10\1\1\3\3\1\1\3\51\1\2\3\1\1\7\0"+
    "\1\3\3\0\1\3\4\0\1\1\10\3\1\0\10\3\2\1\2\0"+
    "\2\3\12\12\12\3\6\1\2\3\2\0\1\3\22\1\3\3\30\1"+
    "\1\3\11\1\1\3\1\1\2\3\7\1\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\6\3\12\12\2\3\2\0\15\3\60\1"+
    "\1\0\2\1\7\0\5\3\7\1\10\0\1\3\12\12\47\3\2\1"+
    "\1\3\1\1\2\3\2\1\1\3\1\1\2\3\1\1\6\3\4\1"+
    "\1\3\7\1\1\3\3\1\1\3\1\1\1\3\1\1\2\3\2\1"+
    "\1\3\4\1\1\0\2\1\6\0\1\3\2\0\1\1\2\3\5\1"+
    "\1\3\1\1\1\3\6\0\2\3\12\12\2\3\4\1\40\3\1\1"+
    "\27\3\2\0\6\3\12\12\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\1\1\3\44\1\4\3\24\0\1\3\2\0\5\1"+
    "\13\0\1\3\44\0\11\3\1\0\71\3\53\1\24\0\1\1\12\12"+
    "\6\3\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1"+
    "\4\0\15\1\14\0\1\1\1\0\12\12\4\0\2\3\46\1\1\3"+
    "\1\1\5\3\1\1\2\3\53\1\1\3\u014d\1\1\3\4\1\2\3"+
    "\7\1\1\3\1\1\1\3\4\1\2\3\51\1\1\3\4\1\2\3"+
    "\41\1\1\3\4\1\2\3\7\1\1\3\1\1\1\3\4\1\2\3"+
    "\17\1\1\3\71\1\1\3\4\1\2\3\103\1\2\3\3\0\40\3"+
    "\20\1\20\3\125\1\14\3\u026c\1\2\3\21\1\1\3\32\1\5\3"+
    "\113\1\3\3\3\0\10\1\7\3\15\1\1\3\4\1\3\0\13\3"+
    "\22\1\3\0\13\3\22\1\2\0\14\3\15\1\1\3\3\1\1\3"+
    "\2\0\14\3\64\1\40\0\3\3\1\1\4\3\1\1\1\0\2\3"+
    "\12\12\41\3\3\0\2\3\12\12\6\3\130\1\10\3\51\1\1\0"+
    "\1\1\5\3\106\1\12\3\37\1\1\3\14\0\4\3\14\0\12\3"+
    "\12\12\36\1\2\3\5\1\13\3\54\1\4\3\21\0\7\1\2\0"+
    "\6\3\12\12\46\3\27\1\5\0\4\3\65\1\12\0\1\3\35\0"+
    "\2\3\1\0\12\12\6\3\12\12\15\3\1\1\10\3\17\0\101\3"+
    "\5\0\57\1\21\0\7\1\4\3\12\12\21\3\11\0\14\3\3\0"+
    "\36\1\15\0\2\1\12\12\54\1\16\0\14\3\44\1\24\0\10\3"+
    "\12\12\3\3\3\1\12\12\44\1\122\3\3\0\1\3\25\0\4\1"+
    "\1\0\4\1\3\0\2\1\1\3\2\0\6\3\300\1\66\0\6\3"+
    "\4\0\u0116\1\2\3\6\1\2\3\46\1\2\3\6\1\2\3\10\1"+
    "\1\3\1\1\1\3\1\1\1\3\1\1\1\3\37\1\2\3\65\1"+
    "\1\3\7\1\1\3\1\1\3\3\3\1\1\3\7\1\3\3\4\1"+
    "\2\3\6\1\4\3\15\1\5\3\3\1\1\3\7\1\102\3\2\0"+
    "\23\3\1\0\34\3\1\1\15\3\1\1\20\3\15\1\63\3\41\0"+
    "\21\3\1\1\4\3\1\1\2\3\12\1\1\3\1\1\3\3\5\1"+
    "\6\3\1\1\1\3\1\1\1\3\1\1\1\3\4\1\1\3\13\1"+
    "\2\3\4\1\5\3\5\1\4\3\1\1\21\3\43\0\2\1\4\0"+
    "\u032d\3\64\0\u0716\3\57\1\1\3\57\1\1\3\205\1\6\3\4\1"+
    "\3\0\2\1\14\3\46\1\1\3\1\1\5\3\1\1\2\3\70\1"+
    "\7\3\1\1\17\3\1\0\27\1\11\3\7\1\1\3\7\1\1\3"+
    "\7\1\1\3\7\1\1\3\7\1\1\3\7\1\1\3\7\1\1\3"+
    "\7\1\1\3\40\0\57\3\1\1\u01d5\3\2\1\1\0\31\3\17\0"+
    "\1\3\5\1\2\3\3\0\2\1\4\3\126\1\2\3\2\0\2\3"+
    "\3\1\1\3\132\1\1\3\4\1\5\3\51\1\3\3\136\1\21\3"+
    "\33\1\65\3\20\1\u0200\3\u19b6\1\112\3\u51cd\1\63\3\u048d\1\103\3"+
    "\56\1\2\3\u010d\1\3\3\20\1\12\12\2\1\24\3\57\1\4\0"+
    "\1\3\12\0\1\3\37\1\1\3\1\0\106\1\14\0\45\3\11\1"+
    "\2\3\147\1\2\3\4\1\1\3\36\1\2\3\2\1\105\3\13\1"+
    "\1\0\3\1\1\0\4\1\1\0\27\1\5\0\30\3\64\1\14\3"+
    "\2\0\62\1\21\0\13\3\12\12\6\3\22\0\6\1\3\3\1\1"+
    "\4\3\12\12\34\1\10\0\2\3\27\1\15\0\14\3\35\1\3\3"+
    "\4\0\57\1\16\0\16\3\1\1\12\12\6\3\5\1\1\0\12\1"+
    "\12\12\5\1\1\3\51\1\16\0\11\3\3\1\1\0\10\1\2\0"+
    "\2\3\12\12\6\3\27\1\3\3\1\1\3\0\62\1\1\0\1\1"+
    "\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\3\3\1"+
    "\2\3\13\1\5\0\2\3\3\1\2\0\12\3\6\1\2\3\6\1"+
    "\2\3\6\1\11\3\7\1\1\3\7\1\1\3\53\1\1\3\4\1"+
    "\4\3\2\1\132\3\43\1\10\0\1\3\2\0\2\3\12\12\6\3"+
    "\u2ba4\1\14\3\27\1\4\3\61\1\u2104\3\u016e\1\2\3\152\1\46\3"+
    "\7\1\14\3\5\1\5\3\1\1\1\0\12\1\1\3\15\1\1\3"+
    "\5\1\1\3\1\1\1\3\2\1\1\3\2\1\1\3\154\1\41\3"+
    "\u016b\1\22\3\100\1\2\3\66\1\50\3\14\1\4\3\20\0\20\3"+
    "\16\0\5\3\2\0\30\3\3\0\40\3\5\1\1\3\207\1\23\3"+
    "\12\12\7\3\32\1\4\3\1\0\1\3\32\1\13\3\131\1\3\3"+
    "\6\1\2\3\6\1\2\3\6\1\2\3\3\1\43\3\14\1\1\3"+
    "\32\1\1\3\23\1\1\3\2\1\1\3\17\1\2\3\16\1\42\3"+
    "\173\1\105\3\65\0\210\3\1\0\202\3\35\1\3\3\61\1\17\3"+
    "\1\0\37\3\40\1\20\3\21\1\1\0\10\1\1\0\5\3\46\1"+
    "\5\0\5\3\36\1\2\3\44\1\4\3\10\1\1\3\5\0\52\3"+
    "\236\1\2\3\12\12\126\3\50\1\10\3\64\1\234\3\u0137\1\11\3"+
    "\26\1\12\3\10\1\230\3\6\1\2\3\1\1\1\3\54\1\1\3"+
    "\2\1\3\3\1\1\2\3\27\1\12\3\27\1\11\3\37\1\141\3"+
    "\26\1\12\3\32\1\106\3\70\1\6\3\2\1\100\3\1\1\3\0"+
    "\1\3\2\0\5\3\4\0\4\1\1\3\3\1\1\3\33\1\4\3"+
    "\3\0\4\3\1\0\40\3\35\1\3\3\35\1\43\3\10\1\1\3"+
    "\34\1\2\0\31\3\66\1\12\3\26\1\12\3\23\1\15\3\22\1"+
    "\156\3\111\1\u03b7\3\3\0\65\1\17\0\37\3\12\12\17\3\4\0"+
    "\55\1\13\0\25\3\31\1\7\3\12\12\6\3\3\0\44\1\16\0"+
    "\1\3\12\12\20\3\43\1\1\0\2\3\1\1\11\3\3\0\60\1"+
    "\16\0\4\1\13\3\12\12\1\1\45\3\22\1\1\3\31\1\14\0"+
    "\170\3\57\1\14\0\5\3\12\12\7\3\3\0\1\3\10\1\2\3"+
    "\2\1\2\3\26\1\1\3\7\1\1\3\2\1\1\3\5\1\2\3"+
    "\1\0\1\1\7\0\2\3\2\0\2\3\3\0\11\3\1\0\5\3"+
    "\5\1\2\0\2\3\7\0\3\3\5\0\u010b\3\60\1\24\0\2\1"+
    "\1\3\1\1\10\3\12\12\246\3\57\1\7\0\2\3\11\0\77\3"+
    "\60\1\21\0\3\3\1\1\13\3\12\12\46\3\53\1\15\0\10\3"+
    "\12\12\u01d6\3\100\1\12\12\25\3\1\1\u01c0\3\71\1\u0507\3\u0399\1"+
    "\147\3\157\0\u0b91\3\u042f\1\u33d1\3\u0239\1\7\3\37\1\1\3\12\12"+
    "\146\3\36\1\2\3\5\0\13\3\60\1\7\0\11\3\4\1\14\3"+
    "\12\12\11\3\25\1\5\3\23\1\u0370\3\105\1\13\3\1\1\56\0"+
    "\20\3\4\0\15\1\u4060\3\2\1\u0bfe\3\153\1\5\3\15\1\3\3"+
    "\11\1\7\3\12\1\3\3\2\0\u14c6\3\5\0\3\3\6\0\10\3"+
    "\10\0\2\3\7\0\36\3\4\0\224\3\3\0\u01bb\3\125\1\1\3"+
    "\107\1\1\3\2\1\2\3\1\1\2\3\2\1\2\3\4\1\1\3"+
    "\14\1\1\3\1\1\1\3\7\1\1\3\101\1\1\3\4\1\2\3"+
    "\10\1\1\3\7\1\1\3\34\1\1\3\4\1\1\3\5\1\1\3"+
    "\1\1\3\3\7\1\1\3\u0154\1\2\3\31\1\1\3\31\1\1\3"+
    "\37\1\1\3\31\1\1\3\37\1\1\3\31\1\1\3\37\1\1\3"+
    "\31\1\1\3\37\1\1\3\31\1\1\3\10\1\2\3\62\12\u1000\3"+
    "\305\1\13\3\7\0\u0529\3\4\1\1\3\33\1\1\3\2\1\1\3"+
    "\1\1\2\3\1\1\1\3\12\1\1\3\4\1\1\3\1\1\1\3"+
    "\1\1\6\3\1\1\4\3\1\1\1\3\1\1\1\3\1\1\1\3"+
    "\3\1\1\3\2\1\1\3\1\1\2\3\1\1\1\3\1\1\1\3"+
    "\1\1\1\3\1\1\1\3\1\1\1\3\2\1\1\3\1\1\2\3"+
    "\4\1\1\3\7\1\1\3\4\1\1\3\4\1\1\3\1\1\1\3"+
    "\12\1\1\3\21\1\5\3\3\1\1\3\5\1\1\3\21\1\u0274\3"+
    "\32\0\6\3\32\0\6\3\32\0\u0e76\3\ua6d7\1\51\3\u1035\1\13\3"+
    "\336\1\u3fe2\3\u021e\1\uffff\3\uffff\3\uffff\3\uffff\3\uffff\3\uffff\3\uffff\3\uffff\3\uffff\3\uffff\3\uffff\3\u06ed\3"+
    "\360\0\uffff\3\uffff\3\ufe12\3";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\2\3\1\1\1\2\1\0"+
    "\1\2\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\14\0\30\0\14\0\44\0\60\0\14\0\74"+
    "\0\110\0\44\0\44\0\124\0\124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\3\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\2\15\0\1\3\2\0\1\3"+
    "\5\0\1\3\2\0\3\12\1\0\1\13\6\12\7\0"+
    "\1\7\15\0\1\7\14\0\1\11\1\14\12\0\1\15"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline=1;
    yycolumn=1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3058) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error: "+yytext());
            }
          case 4: break;
          case 2: 
            { return (new Token(yytext(),yyline,yycolumn));
            }
          case 5: break;
          case 3: 
            { /*Ignorando*/
            }
          case 6: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
